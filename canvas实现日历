<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Canvas甘特图缩放和拖动示例</title>
    <style>
        canvas {
            border: 1px solid #000;
            cursor: move;
        }
    </style>
</head>
<body>
    <canvas id="ganttChart" width="800" height="400"></canvas>

    <script>
        const canvas = document.getElementById('ganttChart');
        const ctx = canvas.getContext('2d');

        let scale = 1;
        const minScale = 0.5;
        const maxScale = 5;
        let offsetX = 0;
        let offsetY = 0;
        let isDragging = false;
        let lastX, lastY;

        // 示例数据
        const tasks = [
            { name: "任务1", start: 0, duration: 5 },
            { name: "任务2", start: 3, duration: 4 },
            { name: "任务3", start: 7, duration: 3 }
        ];

        function drawGanttChart() {
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.setTransform(scale, 0, 0, scale, offsetX, offsetY);

            const barHeight = 30;
            const barSpacing = 10;

            tasks.forEach((task, index) => {
                const y = index * (barHeight + barSpacing);
                ctx.fillStyle = 'blue';
                ctx.fillRect(task.start * 50, y, task.duration * 50, barHeight);

                ctx.fillStyle = 'black';
                ctx.font = '12px Arial';
                ctx.fillText(task.name, 0, y + barHeight / 2);
            });
        }

        canvas.addEventListener('wheel', (event) => {
            event.preventDefault();

            const rect = canvas.getBoundingClientRect();
            const mouseX = event.clientX - rect.left;
            const mouseY = event.clientY - rect.top;

            const canvasX = (mouseX - offsetX) / scale;
            const canvasY = (mouseY - offsetY) / scale;

            const zoom = event.deltaY > 0 ? 0.9 : 1.1;
            scale *= zoom;
            scale = Math.max(minScale, Math.min(maxScale, scale));

            offsetX = mouseX - canvasX * scale;
            offsetY = mouseY - canvasY * scale;

            drawGanttChart();
        });

        canvas.addEventListener('mousedown', (event) => {
            isDragging = true;
            lastX = event.clientX;
            lastY = event.clientY;
        });

        canvas.addEventListener('mousemove', (event) => {
            if (isDragging) {
                const deltaX = event.clientX - lastX;
                const deltaY = event.clientY - lastY;
                offsetX += deltaX;
                offsetY += deltaY;
                lastX = event.clientX;
                lastY = event.clientY;
                drawGanttChart();
            }
        });

        canvas.addEventListener('mouseup', () => {
            isDragging = false;
        });

        canvas.addEventListener('mouseleave', () => {
            isDragging = false;
        });

        // 初始绘制
        drawGanttChart();
    </script>
</body>
</html>
