Here's the updated and integrated code with the requested changes:

```html
<template>
  <div class="container mx-auto p-4" ref="containerRef">
    <div class="button-group mb-4">
      <button @click="toggleColumn('branch')" class="btn mr-2">Toggle Branch Column</button>
      <button @click="toggleColumn('both')" class="btn mr-2">Toggle Branch and Leaf Columns</button>
      <button @click="toggleColumn('leaf')" class="btn">Toggle Leaf Column</button>
    </div>

    <div class="table-container">
      <div class="table-header" :style="headerStyle">
        <div class="header-group activity-process" :style="activityProcessStyle">
          <div class="header-cell span-3">活动流程</div>
        </div>
        <div class="months-header" ref="timelineRef">
          <div v-for="month in months" :key="month" class="month-cell">{{ month }}</div>
        </div>
      </div>

      <div class="table-body">
        <template v-for="(firstLevel, firstIndex) in treeStructure.children" :key="firstLevel.name">
          <div class="first-level-group" :style="firstLevelStyle">
            <div class="table-cell first-level" :class="{'with-before': hiddenColumns.includes('branch') && hiddenColumns.includes('leaf')}">
              {{ firstLevel.name }}
            </div>
            <div class="branch-content">
              <template v-for="(branch, branchIndex) in firstLevel.children" :key="`${firstIndex}-${branchIndex}`">
                <div class="branch-row" :class="{'no-children': !branch.children || branch.children.length === 0}" :style="branchRowStyle(branch)">
                  <div v-if="!hiddenColumns.includes('branch')" class="table-cell second-level" :class="{'merged': !branch.children || branch.children.length === 0, 'with-before': hiddenColumns.includes('leaf')}">
                    {{ branch.name }}
                  </div>
                  <template v-if="branch.children && branch.children.length">
                    <div class="leaf-content" :style="leafContentStyle">
                      <template v-for="(leaf, leafIndex) in branch.children" :key="`${firstIndex}-${branchIndex}-${leafIndex}`">
                        <div class="leaf-row" :style="leafRowStyle">
                          <div v-if="!hiddenColumns.includes('leaf')" class="table-cell third-level">
                            {{ leaf.name }}
                          </div>
                          <div class="activity-content">
                            <div class="activity-timeline">
                              <div class="activity-axis"></div>
                              <template v-for="(activity, activityIndex) in sortActivitiesByDuration(leaf.activities)" :key="`${firstIndex}-${branchIndex}-${leafIndex}-${activityIndex}`">
                                <el-popover
                                  placement="top"
                                  :width="200"
                                  trigger="hover"
                                  :content="getActivityPath(firstLevel, branch, leaf, activity)"
                                >
                                  <template #reference>
                                    <div class="activity-block"
                                         :style="getActivityStyle(activity, activityIndex)">
                                      <span class="activity-text">
                                        {{ activity.description }}
                                      </span>
                                    </div>
                                  </template>
                                </el-popover>
                              </template>
                            </div>
                          </div>
                        </div>
                      </template>
                      <div class="leaf-row branch-activity-row" v-if="branch.activities && branch.activities.length" :style="leafRowStyle">
                        <div v-if="!hiddenColumns.includes('leaf')" class="table-cell third-level empty"></div>
                        <div class="activity-content">
                          <div class="activity-timeline">
                            <div class="activity-axis"></div>
                            <template v-for="(activity, activityIndex) in sortActivitiesByDuration(branch.activities)" :key="`${firstIndex}-${branchIndex}-branch-${activityIndex}`">
                              <el-popover
                                placement="top"
                                :width="200"
                                trigger="hover"
                                :content="getActivityPath(firstLevel, branch, null, activity)"
                              >
                                <template #reference>
                                  <div class="activity-block"
                                       :style="getActivityStyle(activity, activityIndex)">
                                    <span class="activity-text">
                                      {{ activity.description }}
                                    </span>
                                  </div>
                                </template>
                              </el-popover>
                            </template>
                          </div>
                        </div>
                      </div>
                    </div>
                  </template>
                  <template v-else>
                    <div class="activity-content">
                      <div class="activity-timeline">
                        <div class="activity-axis"></div>
                        <template v-for="(activity, activityIndex) in sortActivitiesByDuration(branch.activities)" :key="`${firstIndex}-${branchIndex}-${activityIndex}`">
                          <el-popover
                            placement="top"
                            :width="200"
                            trigger="hover"
                            :content="getActivityPath(firstLevel, branch, null, activity)"
                          >
                            <template #reference>
                              <div class="activity-block"
                                   :style="getActivityStyle(activity, activityIndex)">
                                <span class="activity-text">
                                  {{ activity.description }}
                                </span>
                              </div>
                            </template>
                          </el-popover>
                        </template>
                      </div>
                    </div>
                  </template>
                </div>
              </template>
            </div>
          </div>
        </template>
      </div>

      <div class="current-date-line" :style="currentDateLineStyle">
        <div class="current-date">{{ formattedCurrentDate }}</div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted, onUnmounted, computed, nextTick } from 'vue';

const containerRef = ref(null);
const timelineRef = ref(null);
const months = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'];
const currentDate = ref(new Date());
const currentYear = computed(() => currentDate.value.getFullYear());
const currentDateLineStyle = ref({});
const hiddenColumns = ref([]);

const formattedCurrentDate = computed(() => {
  const date = currentDate.value;
  return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
});

const treeStructure = reactive({
  name: "Root",
  children: [
    {
      name: "First Level 1",
      children: [
        {
          name: "Branch 1-1",
          children: [
            { name: "Leaf 1-1-1", activities: [{ name: "Activity 1", description: "Description of Activity 1", startTime: "2024-01-01", endTime: "2024-03-15" }] },
            { name: "Leaf 1-1-2", activities: [{ name: "Activity 2", description: "Description of Activity 2", startTime: "2024-02-01", endTime: "2024-05-10" },
              { name: "Activity 2", description: "Description of Activity 2", startTime: "2024-06-01", endTime: "2024-08-10" }
            ] }
          ],
          activities: [
            { name: "Branch Activity 1", description: "Description of Branch Activity 1", startTime: "2024-01-15", endTime: "2024-04-30" },
            { name: "Branch Activity 2", description: "Description of Branch Activity 2", startTime: "2024-05-15", endTime: "2024-08-30" }
          ]
        },
        {
          name: "Branch 1-2",
          activities: [{ name: "Activity 3", description: "Description of Activity 3", startTime: "2024-03-01", endTime: "2024-07-15" }]
        }
      ]
    },
    {
      name: "First Level 2",
      children: [
        {
          name: "Branch 2-1",
          children: [
            { name: "Leaf 2-1-1", activities: [{ name: "Activity 4", description: "Description of Activity 4", startTime: "2024-04-01", endTime: "2024-08-20" }] },
            { name: "Leaf 2-1-2", activities: [{ name: "Activity 5", description: "Description of Activity 5", startTime: "2024-05-01", endTime: "2024-09-30" }] },
            { name: "Leaf 2-1-3", activities: [{ name: "Activity 6", description: "Description of Activity 6", startTime: "2024-06-01", endTime: "2024-10-30" }] }
          ]
        }
      ]
    },
    {
      name: "First Level 3",
      children: [
        {
          name: "Branch 3-1",
          activities: [{ name: "Activity 7", description: "Description of Activity 7", startTime: "2024-07-01", endTime: "2024-11-05" }]
        },
        {
          name: "Branch 3-2",
          children: [
            { name: "Leaf 3-2-1", activities: [{ name: "Activity 8", description: "Description of Activity 8", startTime: "2024-08-01", endTime: "2024-12-10" }] },
            { name: "Leaf 3-2-2", activities: [{ name: "Activity 9", description: "Description of Activity 9", startTime: "2024-09-01", endTime: "2024-12-31" }] }
          ]
        }
      ]
    }
  ]
}); 

const headerStyle = computed(() => {
  let gridTemplateColumns = '';
  if (hiddenColumns.value.includes('branch') && hiddenColumns.value.includes('leaf')) {
    gridTemplateColumns = '100px minmax(1200px, 1fr)';
  } else if (hiddenColumns.value.includes('branch') || hiddenColumns.value.includes('leaf')) {
    gridTemplateColumns = '200px minmax(1200px, 1fr)';
  } else {
    gridTemplateColumns = '300px minmax(1200px, 1fr)';
  }
  return { gridTemplateColumns };
});

const activityProcessStyle = computed(() => {
  let width = '300px';
  if (hiddenColumns.value.includes('branch') && hiddenColumns.value.includes('leaf')) {
    width = '100px';
  } else if (hiddenColumns.value.includes('branch') || hiddenColumns.value.includes('leaf')) {
    width = '200px';
  }
  return { width };
});

const firstLevelStyle = computed(() => {
  let gridTemplateColumns = '100px 1fr';
  return { gridTemplateColumns };
});

const branchRowStyle = (branch) => {
  const hasNoChildren = !branch.children || branch.children.length === 0;
  let gridTemplateColumns = '';
  if (hiddenColumns.value.includes('branch') && hiddenColumns.value.includes('leaf')) {
    gridTemplateColumns = '1fr';
  } else if (hiddenColumns.value.includes('branch')) {
    gridTemplateColumns = '1fr';
  } else if (hiddenColumns.value.includes('leaf')) {
    gridTemplateColumns = '100px 1fr';
  } else {
    gridTemplateColumns = hasNoChildren ? '200px 1fr' : '100px 1fr';
  }
  return { gridTemplateColumns };
};

const leafContentStyle = computed(() => {
  return { width: '100%' };
});

const leafRowStyle = computed(() => {
  let gridTemplateColumns = '';
  if (hiddenColumns.value.includes('leaf')) {
    gridTemplateColumns = '1fr';
  } else {
    gridTemplateColumns = '100px 1fr';
  }
  return { gridTemplateColumns };
});

const sortActivitiesByDuration = (activities) => {
  return [...activities].sort((a, b) => {
    const durationA = new Date(a.endTime) - new Date(a.startTime);
    const durationB = new Date(b.endTime) - new Date(b.startTime);
    return durationB - durationA;
  });
};

const getActivityStyle = (activity, index) => {
  const startDate = new Date(activity.startTime);
  const endDate = new Date(activity.endTime);
  const yearStart = new Date(currentYear.value, 0, 1);
  const yearEnd = new Date(currentYear.value, 11, 31);

  let left = ((startDate - yearStart) / (yearEnd - yearStart)) * 100;
  let width = ((endDate - startDate) / (yearEnd - yearStart)) * 100;

  const isPastActivity = endDate < currentDate.value;

  return {
    left: `${left}%`,
    width: `${width}%`,
    backgroundColor: isPastActivity ? '#CCCCCC' : '#4CAF50',
    zIndex: index + 3, // Increased z-index to be above the axis line
  };
};

const getActivityPath = (firstLevel, branch, leaf, activity) => {
  let path = `${firstLevel.name} > ${branch.name}`;
  if (leaf) {
    path += ` > ${leaf.name}`;
  }
  path += ` > ${activity.description}`;
  return path;
};

const updateDateLine = () => {
  if (!containerRef.value || !timelineRef.value) return;

  const containerRect = containerRef.value.getBoundingClientRect();
  const timelineRect = timelineRef.value.getBoundingClientRect();
  const timelineLeftOffset = timelineRect.left - containerRect.left;

  const startOfYear = new Date(currentYear.value, 0, 1);
  const endOfYear = new Date(currentYear.value, 11, 31);
  const totalDays = (endOfYear - startOfYear) / (24 * 60 * 60 * 1000) + 1;
  const daysPassed = Math.floor((currentDate.value - startOfYear) / (24 * 60 * 60 * 1000));

  const leftPosition = (daysPassed / totalDays) * timelineRect.width;

  currentDateLineStyle.value = {
    left: `${timelineLeftOffset + leftPosition}px`,
    height: `${containerRect.height}px`,
  };
};

const updateLayout = () => {
  if (timelineRef.value) {
    const timelineWidth = timelineRef.value.offsetWidth;
    document.documentElement.style.setProperty('--timeline-width', `${timelineWidth}px`);
  }
  updateDateLine();
};

const toggleColumn = (column) => {
  if (column === 'both') {
    if (hiddenColumns.value.includes('branch') && hiddenColumns.value.includes('leaf')) {
      hiddenColumns.value = [];
    } else {
      hiddenColumns.value = ['branch', 'leaf'];
    }
  } else {
    const index = hiddenColumns.value.indexOf(column);
    if (index > -1) {
      hiddenColumns.value.splice(index, 1);
    } else {
      hiddenColumns.value.push(column);
    }
  }
  nextTick(() => {
    updateLayout();
  });
};

onMounted(() => {
  updateLayout();
  window.addEventListener('resize', updateLayout);

  const timer = setInterval(() => {
    currentDate.value = new Date();
    updateDateLine();
  }, 1000 * 60 * 60); // Update every hour

  onUnmounted(() => {
    clearInterval(timer);
    window.removeEventListener('resize', updateLayout);
  });
});
</script>

<style scoped>
.container {
  font-family: Arial, sans-serif;
  font-size: 14px;
  position: relative;
  overflow: auto;
}

.button-group {
  display: flex;
  justify-content: flex-start;
  margin-bottom: 1rem;
}

.btn {
  padding: 0.5rem 1rem;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.btn:hover {
  background-color: #45a049;
}

.table-container {
  display: flex;
  flex-direction: column;
  border: 1px solid #e2e8f0;
  min-width: fit-content;
}

.table-header {
  display: grid;
  background-color: #f8fafc;
  font-weight: 600;
  position: sticky;
  top: 0;
  z-index: 10;
}

.header-group {
  display: flex;
  flex-direction: column;
}

.header-cell {
  padding: 12px 8px;
  text-align: center;
  border-right: 1px solid #e2e8f0;
  border-bottom: 1px solid #e2e8f0;
  display: flex;
  align-items: center;
  justify-content: center;
}

.span-3 {
  grid-column: span 3;
}

.months-header {
  display: flex;
}

.month-cell {
  flex: 1;
  min-width: 100px;
  box-sizing: border-box;
  padding: 12px 8px;
  text-align: center;
  border-right: 1px solid #e2e8f0;
  border-bottom: 1px solid #e2e8f0;
}

.table-body {
  display: flex;
  flex-direction: column;
}

.first-level-group {
  display: grid;
}

.branch-content {
  display: flex;
  flex-direction: column;
}

.branch-row {
  display: grid;
}

.leaf-content {
  display: flex;
  flex-direction: column;
}

.leaf-row {
  display: grid;
}

.table-cell {
  padding: 8px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  overflow: hidden;
  position: relative;
  border-left: 1px solid #e2e8f0;
}

.table-cell::before,
.table-cell::after {
  content: '';
  position: absolute;
  background-color: #e2e8f0;
  z-index: 1;
}

.table-cell::before {
  right: 0;
  top: 0;
  width: 1px;
  height: 100%;
}

.table-cell::after {
  left: 0;
  bottom: 0;
  width: 100%;
  height: 1px;
}

.first-level {
  grid-row: 1 / -1;
}

.first-level.with-before::before {
  content: '';
  position: absolute;
  right: 0;
  top: 0;
  width: 1px;
  height: 100%;
  background-color: #e2e8f0;
  z-index: 1;
}

.second-level {
  grid-row: 1 / -1;
  border-top: 1px solid #e2e8f0;
}

.second-level.with-before::before {
  content: '';
  position: absolute;
  right: 0;
  top: 0;
  width: 1px;
  height: 100%;
  background-color: #e2e8f0;
  z-index: 1;
}

.activity-content {
  display: flex;
  flex-direction: column;
}

.activity-timeline {
  position: relative;
  height: 40px;
  overflow: visible;
}

.activity-timeline::after {
  content: '';
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 1px;
  background-color: #e2e8f0;
  z-index: 1;
}

.activity-block {
  position: absolute;
  top: 5px;
  bottom: 5px;
  border-radius: 3px;
  display: flex;
  align-items: center;
  padding: 0 5px;
  box-sizing: border-box;
  overflow: hidden;
}

.activity-text {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  color: white;
  font-size: 12px;
}

.activity-axis {
  position: absolute;
  top: 50%;
  left: 0;
  right: 0;
  height: 1px;
  background-color: #cccccc;
  z-index: 2;
}

.current-date-line {
  position: absolute;
  top: 0;
  width: 2px;
  background-color: red;
  z-index: 10;
}

.current-date {
  position: absolute;
  top: 0;
  left: 5px;
  background-color: rgba(255, 255, 255, 0.8);
  padding: 2px 5px;
  border-radius: 3px;
  font-size: 12px;
  color: #333;
}

.table-cell.second-level.merged {
  grid-column: span 1;
  border-top: 1px solid #e2e8f0;
}

.branch-activity-row {
  background-color: #f8fafc;
}

.third-level {
  border-top: 1px solid #e2e8f0;
}

.table-cell.third-level.empty {
  background-color: #f8fafc;
}

.table-cell:last-child::before,
.activity-timeline:last-child::before {
  display: none;
}

.first-level-group:last-child .table-cell::after,
.branch-row:last-child .table-cell::after,
.leaf-row:last-child .table-cell::after,
.activity-timeline:last-child::after {
  display: none;
}
</style>
```

In this updated code, I've made the following changes:

1. Added a `with-before` class to the `first-level` cell when both branch and leaf columns are hidden:

```html
<div class="table-cell first-level" :class="{'with-before': hiddenColumns.includes('branch') && hiddenColumns.includes('leaf')}">
  {{ firstLevel.name }}
</div>
```

2. Added a `with-before` class to the `second-level` cell when the leaf column is hidden:

```html
<div v-if="!hiddenColumns.includes('branch')" class="table-cell second-level" :class="{'merged': !branch.children || branch.children.length === 0, 'with-before': hiddenColumns.includes('leaf')}">
  {{ branch.name }}
</div>
```

3. Added CSS for the new `with-before` classes:

```css
.first-level.with-before::before {
  content: '';
  position: absolute;
  right: 0;
  top: 0;
  width: 1px;
  height: 100%;
  background-color: #e2e8f0;
  z-index: 1;
}

.second-level.with-before::before {
  content: '';
  position: absolute;
  right: 0;
  top: 0;
  width: 1px;
  height: 100%;
  background-color: #e2e8f0;
  z-index: 1;
}
```

These changes will add the vertical line (before pseudo-element) to the first-level cells when both branch and leaf columns are hidden, and to the second-level cells when only the leaf column is hidden.
