<template>
  <div class="container mx-auto p-4" ref="containerRef">
    <div class="table-container">
      <div class="table-header">
        <div class="header-group activity-process">
          <div class="header-cell span-3">活动流程</div>
        </div>
        <div class="months-header" ref="timelineRef">
          <div v-for="month in months" :key="month" class="month-cell">{{ month }}</div>
        </div>
      </div>
      <div class="table-body">
        <template v-for="(firstLevel, firstIndex) in treeStructure.children" :key="firstLevel.name">
          <div class="first-level-group">
            <div class="table-cell first-level">
              {{ firstLevel.name }}
            </div>
            <div class="branch-content">
              <template v-for="(branch, branchIndex) in firstLevel.children" :key="`${firstIndex}-${branchIndex}`">
                <div class="branch-row" :class="{'no-children': !branch.children || branch.children.length === 0}">
                  <div class="table-cell second-level" :class="{'merged': !branch.children || branch.children.length === 0}">
                    {{ branch.name }}
                  </div>
                  <template v-if="branch.children && branch.children.length">
                    <div class="leaf-content">
                      <template v-for="(leaf, leafIndex) in branch.children" :key="`${firstIndex}-${branchIndex}-${leafIndex}`">
                        <div class="leaf-row">
                          <div class="table-cell third-level">
                            {{ leaf.name }}
                          </div>
                          <div class="activity-content">
                            <div class="activity-row">
                              <div class="activity-timeline">
                                <template v-for="(activity, activityIndex) in sortActivitiesByDuration(leaf.activities)" :key="`${firstIndex}-${branchIndex}-${leafIndex}-${activityIndex}`">
                                  <el-popover
                                    placement="top"
                                    :width="200"
                                    trigger="hover"
                                    :content="getActivityPath(firstLevel, branch, leaf, activity)"
                                  >
                                    <template #reference>
                                      <div class="activity-block"
                                           :style="getActivityStyle(activity, activityIndex)">
                                        <span class="activity-text">
                                          {{ activity.description }}
                                        </span>
                                      </div>
                                    </template>
                                  </el-popover>
                                </template>
                              </div>
                            </div>
                          </div>
                        </div>
                      </template>
                      <div class="leaf-row branch-activity-row" v-if="branch.activities && branch.activities.length">
                        <div class="table-cell third-level empty"></div>
                        <div class="activity-content">
                          <div class="activity-row">
                            <div class="activity-timeline">
                              <template v-for="(activity, activityIndex) in sortActivitiesByDuration(branch.activities)" :key="`${firstIndex}-${branchIndex}-branch-${activityIndex}`">
                                <el-popover
                                  placement="top"
                                  :width="200"
                                  trigger="hover"
                                  :content="getActivityPath(firstLevel, branch, null, activity)"
                                >
                                  <template #reference>
                                    <div class="activity-block"
                                         :style="getActivityStyle(activity, activityIndex)">
                                      <span class="activity-text">
                                        {{ activity.description }}
                                      </span>
                                    </div>
                                  </template>
                                </el-popover>
                              </template>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </template>
                  <template v-else>
                    <div class="activity-content">
                      <div class="activity-row">
                        <div class="activity-timeline">
                          <template v-for="(activity, activityIndex) in sortActivitiesByDuration(branch.activities)" :key="`${firstIndex}-${branchIndex}-${activityIndex}`">
                            <el-popover
                              placement="top"
                              :width="200"
                              trigger="hover"
                              :content="getActivityPath(firstLevel, branch, null, activity)"
                            >
                              <template #reference>
                                <div class="activity-block"
                                     :style="getActivityStyle(activity, activityIndex)">
                                  <span class="activity-text">
                                    {{ activity.description }}
                                  </span>
                                </div>
                              </template>
                            </el-popover>
                          </template>
                        </div>
                      </div>
                    </div>
                  </template>
                </div>
              </template>
            </div>
          </div>
        </template>
      </div>
    </div>
    <div class="current-date-line" :style="currentDateLineStyle"></div>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted, onUnmounted, computed } from 'vue';

const containerRef = ref(null);
const timelineRef = ref(null);
const months = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'];
const currentDate = ref(new Date());
const currentYear = computed(() => currentDate.value.getFullYear());
const currentDateLineStyle = ref({});

const treeStructure = reactive({
  name: "Root",
  children: [
    {
      name: "First Level 1",
      children: [
        {
          name: "Branch 1-1",
          children: [
            { name: "Leaf 1-1-1", activities: [{ name: "Activity 1", description: "Description of Activity 1", startTime: "2024-01-01", endTime: "2024-03-15" }] },
            { name: "Leaf 1-1-2", activities: [{ name: "Activity 2", description: "Description of Activity 2", startTime: "2024-02-01", endTime: "2024-05-10" },
              { name: "Activity 2", description: "Description of Activity 2", startTime: "2024-05-01", endTime: "2024-06-10" }
            ] },
          ],
          activities: [
            { name: "Branch Activity 1", description: "Description of Branch Activity 1", startTime: "2024-01-15", endTime: "2024-04-30" },
            { name: "Branch Activity 2", description: "Description of Branch Activity 2", startTime: "2024-05-15", endTime: "2024-08-30" }
          ]
        },
        {
          name: "Branch 1-2",
          activities: [{ name: "Activity 3", description: "Description of Activity 3", startTime: "2024-03-01", endTime: "2024-07-15" },
            { name: "Activity 3", description: "Description of Activity 3", startTime: "2024-08-01", endTime: "2024-12-15" }
          ]
        },
      ]
    },
    {
      name: "First Level 2",
      children: [
        {
          name: "Branch 2-1",
          children: [
            { name: "Leaf 2-1-1", activities: [{ name: "Activity 4", description: "Description of Activity 4", startTime: "2024-04-01", endTime: "2024-08-20" }] },
            { name: "Leaf 2-1-2", activities: [{ name: "Activity 5", description: "Description of Activity 5", startTime: "2024-05-01", endTime: "2024-09-30" }] },
            { name: "Leaf 2-1-3", activities: [{ name: "Activity 6", description: "Description of Activity 6", startTime: "2024-06-01", endTime: "2024-10-30" }] },
          ]
        },
      ]
    },
    {
      name: "First Level 3",
      children: [
        {
          name: "Branch 3-2",
          children: [
            { name: "Leaf 3-2-1", activities: [{ name: "Activity 8", description: "Description of Activity 8", startTime: "2024-08-01", endTime: "2024-12-10" }] },
            { name: "Leaf 3-2-2", activities: [{ name: "Activity 9", description: "Description of Activity 9", startTime: "2024-09-01", endTime: "2024-12-31" }] },
          ],
          activities: [{ name: "Branch Activity 2", description: "Description of Branch Activity 2", startTime: "2024-08-15", endTime: "2024-12-15" }]
        },
        {
          name: "Branch 3-1",
          activities: [{ name: "Activity 7", description: "Description of Activity 7", startTime: "2024-07-01", endTime: "2024-11-05" }]
        },
      ]
    },
  ]
});

const sortActivitiesByDuration = (activities) => {
  return [...activities].sort((a, b) => {
    const durationA = new Date(a.endTime) - new Date(a.startTime);
    const durationB = new Date(b.endTime) - new Date(b.startTime);
    return durationB - durationA;
  });
};

const getActivityStyle = (activity, index) => {
  const startDate = new Date(activity.startTime);
  const endDate = new Date(activity.endTime);
  const yearStart = new Date(currentYear.value, 0, 1);
  const yearEnd = new Date(currentYear.value, 11, 31);

  let left = ((startDate - yearStart) / (yearEnd - yearStart)) * 100;
  let width = ((endDate - startDate) / (yearEnd - yearStart)) * 100;

  const isPastActivity = endDate < currentDate.value;

  return {
    left: `${left}%`,
    width: `${width}%`,
    backgroundColor: isPastActivity ? '#CCCCCC' : '#4CAF50',
    zIndex: index + 1,
  };
};

const getActivityPath = (firstLevel, branch, leaf, activity) => {
  let path = `${firstLevel.name} > ${branch.name}`;
  if (leaf) {
    path += ` > ${leaf.name}`;
  }
  path += ` > ${activity.description}`;
  return path;
};

const updateDateLine = () => {
  if (!containerRef.value || !timelineRef.value) return;

  const containerRect = containerRef.value.getBoundingClientRect();
  const timelineRect = timelineRef.value.getBoundingClientRect();
  const timelineLeftOffset = timelineRect.left - containerRect.left;

  const startOfYear = new Date(currentYear.value, 0, 1);
  const endOfYear = new Date(currentYear.value, 11, 31);
  const totalDays = (endOfYear - startOfYear) / (24 * 60 * 60 * 1000) + 1;
  const daysPassed = Math.floor((currentDate.value - startOfYear) / (24 * 60 * 60 * 1000));
  const leftPosition = (daysPassed / totalDays) * timelineRect.width;

  currentDateLineStyle.value = {
    left: `${timelineLeftOffset + leftPosition}px`,
    height: `${containerRect.height}px`,
  };
};

const updateLayout = () => {
  if (timelineRef.value) {
    const timelineWidth = timelineRef.value.offsetWidth;
    document.documentElement.style.setProperty('--timeline-width', `${timelineWidth}px`);
  }
  updateDateLine();
};

onMounted(() => {
  updateLayout();
  window.addEventListener('resize', updateLayout);

  const timer = setInterval(() => {
    currentDate.value = new Date();
    updateDateLine();
  }, 1000 * 60 * 60); // 每小时更新一次

  onUnmounted(() => {
    clearInterval(timer);
    window.removeEventListener('resize', updateLayout);
  });
});
</script>

<style scoped>
.container {
  font-family: Arial, sans-serif;
  font-size: 14px;
  position: relative;
  overflow: auto;
}

.table-container {
  display: flex;
  flex-direction: column;
  border: 1px solid #e2e8f0;
  min-width: fit-content;
}

.table-header {
  display: grid;
  grid-template-columns: 300px minmax(1200px, 1fr);
  background-color: #f8fafc;
  font-weight: 600;
  position: sticky;
  top: 0;
  z-index: 10;
}

.header-group {
  display: flex;
  flex-direction: column;
}

.header-cell {
  padding: 12px 8px;
  text-align: center;
  border-right: 1px solid #e2e8f0;
  border-bottom: 1px solid #e2e8f0;
  display: flex;
  align-items: center;
  justify-content: center;
}

.span-3 {
  grid-column: span 3;
}

.months-header {
  display: flex;
}

.month-cell {
  flex: 1;
  min-width: 100px;
  box-sizing: border-box;
  padding: 12px 8px;
  text-align: center;
  border-right: 1px solid #e2e8f0;
  border-bottom: 1px solid #e2e8f0;
}

.table-body {
  display: flex;
  flex-direction: column;
}

.first-level-group {
  display: grid;
  grid-template-columns: 100px 1fr;
  border-top: 1px solid #e2e8f0;
}

.branch-content {
  display: flex;
  flex-direction: column;
}

.branch-row {
  display: grid;
  grid-template-columns: 100px  1fr;
  border-top: 1px solid #e2e8f0;
}

.branch-row.no-children {
  grid-template-columns: 200px 1fr;
}

.leaf-content {
  display: flex;
  flex-direction: column;
}

.leaf-row {
  display: grid;
  grid-template-columns: 100px 1fr;
  border-top: 1px solid #e2e8f0;
}

.activity-row {
  display: grid;
  grid-template-columns: minmax(1200px, 1fr);
  border-top: 1px solid #e2e8f0;
}

.table-cell {
  padding: 8px;
  border-right: 1px solid #e2e8f0;
  display: flex;
  flex-direction: column;
  justify-content: center;
  overflow: hidden;
}

.first-level {
  grid-row: 1 / -1;
}

.second-level {
  grid-row: 1 / -1;
}

.third-level {
  border-right: 1px solid #e2e8f0;
}

.activity-content {
  display: flex;
  flex-direction: column;
}

.table-cell:last-child {
  border-right: none;
}

.first-level-group:first-child {
  border-top: none;
}

.branch-row:first-child {
  border-top: none;
}

.leaf-row:first-child {
  border-top: none;
}

.activity-row:first-child {
  border-top: none;
}

.leaf-content > .leaf-row:first-child .activity-row {
  border-top: none;
}

.activity-timeline {
  position: relative;
  height: 40px;
  overflow: visible;
}

.activity-block {
  position: absolute;
  top: 5px;
  bottom: 5px;
  border-radius: 3px;
  display: flex;
  align-items: center;
  padding: 0 5px;
  box-sizing: border-box;
  overflow: hidden;
}

.activity-text {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  color: white;
  font-size: 12px;
}

.current-date-line {
  position: absolute;
  top: 0;
  width: 2px;
  background-color: red;
  z-index: 10;
}

.table-cell.second-level.merged {
  grid-column: span 1;
}

.branch-row.no-children .activity-content {
  grid-column: 2;
}

.branch-activity-row {
  background-color: #f8fafc;
}

.table-cell.third-level.empty {
  background-color: #f8fafc;
  border-right: 1px solid #e2e8f0;
}
</style>
