堆叠柱状图
<template>
  <div class="chart-container">
    <div ref="chart" class="chart"></div>
  </div>
</template>

<script>
import { ref, onMounted } from 'vue';
import * as echarts from 'echarts';

export default {
  name: 'StackedBarChart',
  setup() {
    const chart = ref(null);

    const initChart = () => {
      const myChart = echarts.init(chart.value);

      const option = {
        title: {
          text: '堆叠柱状图（每个横轴项只有一个柱状体）',
        },
        tooltip: {
          trigger: 'axis',
          axisPointer: {
            type: 'shadow',
          },
        },
        legend: {
          data: ['销售额', '利润'],
        },
        grid: {
          left: '3%',
          right: '4%',
          bottom: '3%',
          containLabel: true,
        },
        xAxis: {
          type: 'category',
          data: ['产品A', '产品B', '产品C', '产品D', '产品E'],
        },
        yAxis: {
          type: 'value',
        },
        series: [
          {
            name: '销售额',
            type: 'bar',
            stack: '总量', // 堆叠在一起
            label: {
              show: true,
              position: 'inside', // 在柱子内部显示数值
            },
            emphasis: {
              focus: 'series',
            },
            data: [320, 302, 301, 334, 390], // 销售额数据
          },
          {
            name: '利润',
            type: 'bar',
            stack: '总量', // 堆叠在一起
            label: {
              show: true,
              position: 'inside', // 在柱子内部显示数值
            },
            emphasis: {
              focus: 'series',
            },
            data: [120, 132, 101, 134, 90], // 利润数据
          },
        ],
      };

      // 使用指定的配置项和数据显示图表。
      myChart.setOption(option);

      // 监听窗口大小变化，自动调整图表大小
      window.addEventListener('resize', () => {
        myChart.resize();
      });
    };

    onMounted(() => {
      initChart();
    });

    return {
      chart,
    };
  },
};
</script>

<style scoped>
.chart-container {
  width: 100%;
  height: 100%;
}

.chart {
  width: 100%;
  height: 400px;
}
</style>


柱状图 和 折线图


<template>
  <div ref="chartContainer" style="width: 100%; height: 400px;"></div>
</template>

<script>
import { ref, onMounted, onUnmounted } from 'vue'
import * as echarts from 'echarts'

export default {
  setup() {
    const chartContainer = ref(null)
    let chart = null

    onMounted(() => {
      if (chartContainer.value) {
        chart = echarts.init(chartContainer.value)
        const option = {
          tooltip: {
            trigger: 'axis',
            axisPointer: {
              type: 'cross',
              crossStyle: {
                color: '#999'
              }
            }
          },
          toolbox: {
            feature: {
              dataView: { show: true, readOnly: false },
              magicType: { show: true, type: ['line', 'bar'] },
              restore: { show: true },
              saveAsImage: { show: true }
            }
          },
          legend: {
            data: ['销售额', '销售量', '平均价格']
          },
          xAxis: [
            {
              type: 'category',
              data: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
              axisPointer: {
                type: 'shadow'
              }
            }
          ],
          yAxis: [
            {
              type: 'value',
              name: '销售额/销售量',
              min: 0,
              max: 250,
              interval: 50,
              axisLabel: {
                formatter: '{value}'
              }
            },
            {
              type: 'value',
              name: '平均价格',
              min: 0,
              max: 25,
              interval: 5,
              axisLabel: {
                formatter: '{value}'
              }
            }
          ],
          series: [
            {
              name: '销售额',
              type: 'bar',
              data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3]
            },
            {
              name: '销售量',
              type: 'bar',
              data: [2.6, 5.9, 9.0, 26.4, 28.7, 70.7, 175.6, 182.2, 48.7, 18.8, 6.0, 2.3]
            },
            {
              name: '平均价格',
              type: 'line',
              yAxisIndex: 1,
              data: [2.0, 2.2, 3.3, 4.5, 6.3, 10.2, 20.3, 23.4, 23.0, 16.5, 12.0, 6.2]
            }
          ]
        }
        chart.setOption(option)
      }
    })

    onUnmounted(() => {
      if (chart) {
        chart.dispose()
      }
    })

    return {
      chartContainer
    }
  }
}
</script>


//// 环形图·
<template>
  <div ref="chartContainer" style="width: 100%; height: 400px;"></div>
</template>

<script>
import { ref, onMounted, onUnmounted, computed } from 'vue'
import * as echarts from 'echarts'

export default {
  setup() {
    const chartContainer = ref(null)
    let chart = null
    let resizeObserver = null

    const originalData = [
      { value: 1048, name: '搜索引擎' },
      { value: 735, name: '直接访问' },
      { value: 580, name: '邮件营销' },
      { value: 484, name: '联盟广告' },
      { value: 300, name: '视频广告' }
    ]

    const sortedData = computed(() => {
      return [...originalData].sort((a, b) => b.value - a.value)
    })

    const total = computed(() => {
      return originalData.reduce((sum, item) => sum + item.value, 0)
    })

    const initChart = () => {
      if (chartContainer.value) {
        chart = echarts.init(chartContainer.value)
        const option = {
          tooltip: {
            trigger: 'item',
            formatter: '{a} <br/>{b}: {c} ({d}%)'
          },
          legend: {
            top: '5%',
            left: 'center',
            orient: 'horizontal',
            itemWidth: 25,
            itemHeight: 14
          },
          series: [
            {
              name: '访问来源',
              type: 'pie',
              radius: ['40%', '70%'],
              avoidLabelOverlap: false,
              itemStyle: {
                borderRadius: 10,
                borderColor: '#fff',
                borderWidth: 2
              },
              label: {
                show: true,
                position: 'outside',
                formatter: '{b}: {c}',
                fontSize: 14
              },
              labelLine: {
                show: true,
                length: 15,
                length2: 10
              },
              data: sortedData.value
            },
            {
              name: '总计',
              type: 'pie',
              radius: ['0%', '30%'],
              label: {
                show: true,
                position: 'center',
                formatter: `{c}\n总计`,
                fontSize: 20,
                fontWeight: 'bold'
              },
              data: [{
                value: total.value,
                name: '总计',
                itemStyle: {
                  color: 'transparent'
                }
              }]
            }
          ]
        }
        chart.setOption(option)
      }
    }

    const handleResize = () => {
      if (chart) {
        chart.resize()
      }
    }

    onMounted(() => {
      initChart()

      // 创建 ResizeObserver 来监听容器大小变化
      resizeObserver = new ResizeObserver(handleResize)
      if (chartContainer.value) {
        resizeObserver.observe(chartContainer.value)
      }

      // 监听窗口 resize 事件
      window.addEventListener('resize', handleResize)
    })

    onUnmounted(() => {
      if (chart) {
        chart.dispose()
      }
      if (resizeObserver) {
        resizeObserver.disconnect()
      }
      window.removeEventListener('resize', handleResize)
    })

    return {
      chartContainer
    }
  }
}
</script>




// 带箭头 
<template>
  <div ref="chartContainer" style="width: 100%; height: 400px;"></div>
</template>

<script>
import { ref, onMounted, onUnmounted } from 'vue'
import * as echarts from 'echarts'

export default {
  setup() {
    const chartContainer = ref(null)
    let chart = null

    onMounted(() => {
      if (chartContainer.value) {
        chart = echarts.init(chartContainer.value)
        const option = {
          tooltip: {
            trigger: 'axis',
            axisPointer: {
              type: 'cross',
              crossStyle: {
                color: '#999'
              }
            }
          },
          toolbox: {
            feature: {
              dataView: { show: true, readOnly: false },
              magicType: { show: true, type: ['line', 'bar'] },
              restore: { show: true },
              saveAsImage: { show: true }
            }
          },
          legend: {
            data: ['销售额']
          },
          xAxis: [
            {
              type: 'category',
              data: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
              axisLine: {
                show: true,
                symbol: ['none', 'arrow'],
                symbolOffset: [0, 10],
                lineStyle: {
                  width: 2
                }
              }
            }
          ],
          yAxis: [
            {
              type: 'value',
              name: '销售额',
              min: 0,
              max: 250,
              interval: 50,
              axisLabel: {
                formatter: '{value}'
              },
              axisLine: {
                show: true,
                symbol: ['none', 'arrow'],
                symbolOffset: [0, 10],
                lineStyle: {
                  width: 2
                }
              }
            }
          ],
          series: [
            {
              name: '销售额',
              type: 'bar',
              data: [2.0, 4.9, 7.0, 23.2, 25.6, 76.7, 135.6, 162.2, 32.6, 20.0, 6.4, 3.3]
            }
          ]
        }
        chart.setOption(option)
      }
    })

    onUnmounted(() => {
      if (chart) {
        chart.dispose()
      }
    })

    return {
      chartContainer
    }
  }
}
</script>
