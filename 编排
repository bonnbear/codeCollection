
<template>
  <div id="app">
    <h1 style="text-align: center">Vue Grid Layout</h1>
    <div>
      <div class="layoutJSON">
        Displayed as <code>[x, y, w, h]</code>:
        <div class="columns">
          <div class="layoutItem" v-for="item in layout" :key="item.i">
            <b>{{ item.i }}</b>: [{{ item.x }}, {{ item.y }}, {{ item.w }}, {{ item.h }}]
          </div>
        </div>
      </div>
    </div>
    <div id="content">
      <button @click="decreaseWidth">Decrease Width</button>
      <button @click="increaseWidth">Increase Width</button>
      <button @click="addItem">Add an item</button>
      <button @click="addItemDynamically">Add an item dynamically</button>
      <!-- <button @click="changeDirection">Change Direction</button> -->
      <input type="checkbox" v-model="draggable" /> Draggable
      <input type="checkbox" v-model="resizable" /> Resizable
      <input type="checkbox" v-model="mirrored" /> Mirrored
      <input type="checkbox" v-model="responsive" /> Responsive
      <input type="checkbox" v-model="preventCollision" /> Prevent Collision
      <div style="margin-top: 10px; margin-bottom: 10px;">
        Row Height: <input type="number" v-model="rowHeight" />
        Col nums: <input type="number" v-model="colNum" />
        Margin x: <input type="number" v-model="marginX" />
        Margin y: <input type="number" v-model="marginY" />
      </div>

      <grid-layout
        ref="gridlayout"
        :margin="[parseInt(marginX), parseInt(marginY)]"
        :layout="layout"
        :responsive-layouts="layouts"
        :col-num="parseInt(colNum)"
        :row-height="rowHeight"
        :is-draggable="draggable"
        :is-resizable="resizable"
        :is-mirrored="mirrored"
        :prevent-collision="preventCollision"
        :vertical-compact="false"
        :use-css-transforms="true"
        :responsive="false"
        @layout-created="layoutCreatedEvent"
        @layout-before-mount="layoutBeforeMountEvent"
        @layout-mounted="layoutMountedEvent"
        @layout-ready="layoutReadyEvent"
        @layout-updated="layoutUpdatedEvent"
        @breakpoint-changed="breakpointChangedEvent"
      >
        <grid-item
          v-for="item in layout"
          :key="item.i"
          :static="item.static"
          :x="item.x"
          :y="item.y"
          :w="item.w"
          :h="item.h"
          :i="item.i"
          :min-w="item.minW"
          :max-w="item.maxW"
          :min-x="item.minX"
          :max-x="item.maxX"
          :min-y="item.minY"
          :max-y="item.maxY"
          :preserve-aspect-ratio="item.preserveAspectRatio"
          ref="gridItemRefs"
          @resize="resize"
          @move="move"
          @resized="resized"
          @container-resized="containerResized"
          @moved="moved"
        >
          <test-element :text="item.i" @removeItem="removeItem($event)"></test-element>
        </grid-item>
      </grid-layout>
      <hr />
      <div @dragstart="dragstart" @drag="drag" @dragend="dragend" class="droppable-element" draggable="true" unselectable="on">
        Droppable Element (Drag me!)
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted, nextTick } from 'vue';
import TestElement from './components/TestElement.vue';
// import { getDocumentDir, setDocumentDir } from "./helpers/DOM";

const testLayouts = {

  lg: [
    { "x": 0, "y": 0, "w": 2, "h": 2, "i": "0" },
    { "x": 2, "y": 0, "w": 2, "h": 4, "i": "1" },
    { "x": 4, "y": 0, "w": 2, "h": 5, "i": "2" },
    { "x": 6, "y": 0, "w": 2, "h": 3, "i": "3" },
    { "x": 8, "y": 0, "w": 2, "h": 3, "i": "4" },
    { "x": 10, "y": 0, "w": 2, "h": 3, "i": "5" },
    { "x": 0, "y": 5, "w": 2, "h": 5, "i": "6" },
    { "x": 2, "y": 5, "w": 2, "h": 5, "i": "7" },
    { "x": 4, "y": 5, "w": 2, "h": 5, "i": "8" },
    { "x": 6, "y": 4, "w": 2, "h": 4, "i": "9" },
    { "x": 8, "y": 4, "w": 2, "h": 4, "i": "10" },
    { "x": 10, "y": 4, "w": 2, "h": 4, "i": "11" },
    { "x": 0, "y": 10, "w": 2, "h": 5, "i": "12" },
    { "x": 2, "y": 10, "w": 2, "h": 5, "i": "13" },
    { "x": 4, "y": 8, "w": 2, "h": 4, "i": "14" },
    { "x": 6, "y": 8, "w": 2, "h": 4, "i": "15" },
    { "x": 8, "y": 10, "w": 2, "h": 5, "i": "16" },
    { "x": 10, "y": 4, "w": 2, "h": 2, "i": "17" },
    { "x": 0, "y": 9, "w": 2, "h": 3, "i": "18" },
    { "x": 2, "y": 6, "w": 2, "h": 2, "i": "19" }
  ]
};

const layouts = reactive(testLayouts);
const layout = ref(layouts["lg"]);
const draggable = ref(true);
const resizable = ref(true);
const mirrored = ref(false);
const responsive = ref(true);
const preventCollision = ref(false);
const compact = ref(true);
const rowHeight = ref(40);
const colNum = ref(24);
const index = ref(layout.value.length);
const marginX = ref(10);
const marginY = ref(10);
const mouseXY = reactive({ x: null, y: null });
const DragPos = reactive({ x: null, y: null, w: 1, h: 1, i: null });
const gridItemRefs = ref([]);
const editMode = ref(true);

const gridlayout = ref(null);

const increaseWidth = () => {
  let width = document.getElementById("content").offsetWidth;
  width += 20;
  document.getElementById("content").style.width = width + "px";
};

const decreaseWidth = () => {
  let width = document.getElementById("content").offsetWidth;
  width -= 20;
  document.getElementById("content").style.width = width + "px";
};

const removeItem = (i) => {
  const index = layout.value.map(item => item.i).indexOf(i);
  layout.value.splice(index, 1);
};

const addItem = () => {
  let item = { "x": 0, "y": 0, "w": 2, "h": 2, "i": index.value + "", whatever: "bbb" };
  index.value++;
  layout.value.push(item);
//   nextTick(()=>{
//           gridlayout.value.layoutUpdate();
//   })
};

const addItemDynamically = () => {
  let x, y;
  let found = false;

  // 遍历所有可能的位置，找到一个空闲的位置
  for (let j = 0; !found && j < colNum.value * 10; j++) {
    for (let i = 0; i < colNum.value && !found; i++) {
      x = i;
      y = j;
      // 检查当前坐标是否已有项目
      found = !layout.value.some(item => (
        (item.x < x + 2 && item.x + item.w > x) &&  // 水平位置检查
        (item.y < y + 2 && item.y + item.h > y)    // 垂直位置检查
      ));
      if (found) break;
    }
  }

  // 如果找到了空闲的位置，添加新项目
  if (found) {
    let item = { x: x, y: y, w: 2, h: 2, i: index.value + "" };
    index.value++;
    layout.value.push(item);
    nextTick(() => {
      gridlayout.value.layoutUpdate();
    });
  } else {
    // 没有找到空闲位置时，将项目添加到最后一行
    let maxY = Math.max(...layout.value.map(item => item.y + item.h));
    let item = { x: 0, y: maxY, w: 2, h: 2, i: index.value + "" };
    index.value++;
    layout.value.push(item);
    nextTick(() => {
      gridlayout.value.layoutUpdate();
    });
  }
};

const move = (i, newX, newY) => {
  console.log("MOVE i=" + i + ", X=" + newX + ", Y=" + newY);
};

const resize = (i, newH, newW, newHPx, newWPx) => {
  console.log("RESIZE i=" + i + ", H=" + newH + ", W=" + newW + ", H(px)=" + newHPx + ", W(px)=" + newWPx);
};

const moved = (i, newX, newY) => {
  console.log("### MOVED i=" + i + ", X=" + newX + ", Y=" + newY);
};

const resized = (i, newH, newW, newHPx, newWPx) => {
  console.log("### RESIZED i=" + i + ", H=" + newH + ", W=" + newW + ", H(px)=" + newHPx + ", W(px)=" + newWPx);
};

const containerResized = (i, newH, newW, newHPx, newWPx) => {
  console.log("### CONTAINER RESIZED i=" + i + ", H=" + newH + ", W=" + newW + ", H(px)=" + newHPx + ", W(px)=" + newWPx);
};

// const changeDirection = () => {
//   let documentDirection = getDocumentDir();
//   let toggle = "";
//   if (documentDirection === "rtl") {
//     toggle = "ltr";
//   } else {
//     toggle = "rtl";
//   }
//   setDocumentDir(toggle);
// };

const layoutCreatedEvent = (newLayout) => {
  console.log("Created layout: ", newLayout);
};

const layoutBeforeMountEvent = (newLayout) => {
  console.log("beforeMount layout: ", newLayout);
};

const layoutMountedEvent = (newLayout) => {
  console.log("Mounted layout: ", newLayout);
};

const layoutReadyEvent = (newLayout) => {
  console.log("Ready layout: ", newLayout);
  layout.value = newLayout;
};

const layoutUpdatedEvent = (newLayout) => {
    debugger
  console.log("Updated layout: ", newLayout);
  layout.value = newLayout;
};

const breakpointChangedEvent = (newBreakpoint, newLayout) => {
  console.log("breakpoint changed breakpoint=", newBreakpoint, ", layout: ", newLayout);
};

const toggleEditMode = () => {
  editMode.value = !editMode.value;
};

const getGridItemRef = (el, index) => {
  if (el) {
    gridItemRefs.value[index] = el;
  }
};

const dragstart = (e) => {
  e.dataTransfer.setData('text', 'Droppable Element');
};

const drag = () => {
  const layoutUnref = layout.value;
  let parentRect = document.getElementById('content').getBoundingClientRect();
  let mouseInGrid = false;
  if (
    mouseXY.x > parentRect.left &&
    mouseXY.x < parentRect.right &&
    mouseXY.y > parentRect.top &&
    mouseXY.y < parentRect.bottom
  ) {
    mouseInGrid = true;
  }
  if (mouseInGrid === true && layoutUnref.findIndex((item) => item.i === 'drop') === -1) {
    layoutUnref.push({
      x: (layoutUnref.length * 2) % (colNum.value || 12),
      y: Math.floor(layoutUnref.length / (colNum.value || 12)),
      w: 2,
      h: 2,
      i: 'drop',
    });
  }
  let index = layoutUnref.findIndex((item) => item.i === 'drop');
  if (index !== -1) {
    try {
      gridItemRefs.value[layoutUnref.length].style.display = 'none';
    } catch { }
    let el = gridItemRefs.value[index];

    if (mouseInGrid === true && el) {
      el.dragging = { top: mouseXY.y - parentRect.top, left: mouseXY.x - parentRect.left };

      let new_pos = el.calcXY(mouseXY.y - parentRect.top, mouseXY.x - parentRect.left);
      if (gridlayout.value) {
        gridlayout.value.dragEvent('dragstart', 'drop', new_pos.x, new_pos.y,2, 2);
      }
      DragPos.i = String(index);
      DragPos.x = layoutUnref[index].x;
      DragPos.y = layoutUnref[index].y;
    }
    if (mouseInGrid === false) {
      if (gridlayout.value) {
        gridlayout.value.dragEvent('dragend', 'drop', 1, 1, 1, 1);
      }
      layout.value = layoutUnref.filter((obj) => obj.i !== 'drop');
    }
  }
};

const dragend = () => {
  const layoutUnref = layout.value;
  let parentRect = document.getElementById('content').getBoundingClientRect();
  let mouseInGrid = false;
  if (
    mouseXY.x > parentRect.left &&
    mouseXY.x < parentRect.right &&
    mouseXY.y > parentRect.top &&
    mouseXY.y < parentRect.bottom
  ) {
    mouseInGrid = true;
  }
  if (mouseInGrid === true) {
    if (gridlayout.value) {
      gridlayout.value.dragEvent('dragend', 'drop', DragPos.x, DragPos.y, 1, 1);
    }
    layout.value = layoutUnref.filter((obj) => obj.i !== 'drop');

    layout.value.push({
      x: DragPos.x,
      y: DragPos.y,
      w: 2,
      h: 2,
      i: `new-${index.value}`,
    });
    index.value++;
    console.log(layout.value);
  }
};

onMounted(() => {
  document.addEventListener('dragover', (e) => {
    mouseXY.x = e.clientX;
    mouseXY.y = e.clientY;
  }, false);
});
</script>

<style scoped>
.droppable-element {
  width: 150px;
  text-align: center;
  background: #fdd;
  border: 1px solid black;
  margin: 10px 0;
  padding: 10px;
}

.vue-grid-layout {
  background: #eee;
}

.vue-grid-item:not(.vue-grid-placeholder) {
  background: #ccc;
  border: 1px solid black;
}

.vue-grid-item .resizing {
  opacity: 0.9;
}

.vue-grid-item .static {
  background: #cce;
}

.vue-grid-item .text {
  font-size: 24px;
  text-align: center;
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  margin: auto;
  height: 100%;
  width: 100%;
}

.vue-grid-item .no-drag {
  height: 100%;
  width: 100%;
}

.vue-grid-item .minMax {
  font-size: 12px;
}

.vue-grid-item .add {
  cursor: pointer;
}

.vue-draggable-handle {
  position: absolute;
  width: 20px;
  height: 20px;
  top: 0;
  left: 0;
  background: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='10' height='10'><circle cx='5' cy='5' r='5' fill='#999999'/></svg>") no-repeat;
  background-position: bottom right;
  padding: 0 8px 8px 0;
  background-repeat: no-repeat;
  background-origin: content-box;
  box-sizing: border-box;
  cursor: pointer;
}



.layoutJSON {
  background: #ddd;
  border: 1px solid black;
  margin-top: 10px;
  padding: 10px;
}

.columns {
  -moz-columns: 120px;
  -webkit-columns: 120px;
  columns: 120px;
}
</style>
