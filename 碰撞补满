<template>
  <div id="app">
    <h1>Swappable Auto-filling Grid Layout Example</h1>
    <grid-layout
      :layout="layout"
      :col-num="12"
      :row-height="30"
      :is-draggable="true"
      :is-resizable="true"
      :vertical-compact="true"
      :use-css-transforms="true"
      @layout-updated="onLayoutUpdated"
      @drag-start="onDragStart"
      @drag="onDrag"
      @drag-end="onDragEnd"
    >
      <grid-item v-for="item in layout" :key="item.i"
        :x="item.x" :y="item.y" :w="item.w" :h="item.h" :i="item.i"
      >
        <div class="grid-item-content">
          Item {{ item.i }}
        </div>
      </grid-item>
    </grid-layout>
  </div>
</template>

<script>
import { ref } from 'vue';
import { GridLayout, GridItem } from 'vue-grid-layout';

export default {
  name: 'App',
  components: {
    GridLayout,
    GridItem
  },
  setup() {
    const layout = ref([
      { x: 0, y: 0, w: 2, h: 2, i: '0' },
      { x: 2, y: 0, w: 2, h: 4, i: '1' },
      { x: 4, y: 0, w: 2, h: 5, i: '2' },
      { x: 6, y: 0, w: 2, h: 3, i: '3' },
      { x: 8, y: 0, w: 2, h: 3, i: '4' }
    ]);

    let draggedItem = null;

    const onDragStart = (item) => {
      draggedItem = item;
    };

    const onDrag = (item, newX, newY) => {
      const itemToSwap = findItemToSwap(newX, newY);
      if (itemToSwap) {
        swapItems(item, itemToSwap);
      }
    };

    const onDragEnd = () => {
      draggedItem = null;
      fillHorizontalGaps();
    };

    const findItemToSwap = (x, y) => {
      return layout.value.find(layoutItem => 
        layoutItem.i !== draggedItem.i &&
        x >= layoutItem.x && x < layoutItem.x + layoutItem.w &&
        y >= layoutItem.y && y < layoutItem.y + layoutItem.h
      );
    };

    const swapItems = (item1, item2) => {
      const index1 = layout.value.findIndex(i => i.i === item1.i);
      const index2 = layout.value.findIndex(i => i.i === item2.i);

      const tempX = layout.value[index1].x;
      const tempY = layout.value[index1].y;

      layout.value[index1].x = layout.value[index2].x;
      layout.value[index1].y = layout.value[index2].y;
      layout.value[index2].x = tempX;
      layout.value[index2].y = tempY;

      // 强制更新布局
      layout.value = [...layout.value];
    };

    const fillHorizontalGaps = () => {
      // 按 y 坐标（行）对项目进行分组
      const rowGroups = {};
      layout.value.forEach(item => {
        if (!rowGroups[item.y]) {
          rowGroups[item.y] = [];
        }
        rowGroups[item.y].push(item);
      });

      // 处理每一行
      Object.values(rowGroups).forEach(row => {
        // 按 x 坐标排序
        row.sort((a, b) => a.x - b.x);

        let currentX = 0;
        row.forEach(item => {
          if (item.x > currentX) {
            // 找到空隙，移动项目
            item.x = currentX;
          }
          currentX = item.x + item.w;
        });
      });

      // 强制更新布局
      layout.value = [...layout.value];
    };

    const onLayoutUpdated = (newLayout) => {
      layout.value = newLayout;
      console.log('Layout updated:', newLayout);
    };

    return {
      layout,
      onDragStart,
      onDrag,
      onDragEnd,
      onLayoutUpdated
    };
  }
};
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}

.grid-item-content {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
  background-color: #f0f0f0;
  border: 1px solid #999;
  border-radius: 4px;
}
</style>
