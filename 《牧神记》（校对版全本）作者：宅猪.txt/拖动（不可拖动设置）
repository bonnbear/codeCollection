<template>
  <div class="container">
    <h2>可拖拽列表</h2>
    <div class="list-container">
      <!-- Loading 状态展示 -->
      <div v-if="loading" class="loading-container">
        <el-icon class="loading-icon"><Loading /></el-icon>
        加载中...
      </div>
      
      <template v-else>
        <!-- 固定的第一个项目，不参与拖拽排序 -->
        <div class="list-item first-item">
          <div class="item-content">
            <div class="item-left">
              <!-- 锁定图标表示该项固定 -->
              <span class="lock-icon">
                <svg viewBox="0 0 24 24" width="14" height="14">
                  <path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z" fill="#999"/>
                </svg>
              </span>
              <span class="item-text">{{ items[0]?.text }}</span>
            </div>
            <div class="item-controls">
              <!-- 显示/隐藏开关 -->
              <el-switch
                v-model="items[0].visible"
                :active-text="items[0].visible ? '显示' : '隐藏'"
                inline-prompt
              />
            </div>
          </div>
        </div>

        <!-- 可拖拽列表区域 -->
        <div ref="listRef" class="draggable-list">
          <div v-for="(item, index) in draggableItems" 
               :key="item.id" 
               class="list-item"
               :style="{ 
                 backgroundColor: item.color,
                 opacity: item.visible ? 1 : 0.5 
               }">
            <div class="item-content">
              <div class="item-left">
                <!-- 拖拽手柄 -->
                <span class="drag-handle">
                  <svg viewBox="0 0 20 20" width="12" height="12">
                    <path d="M7 2a2 2 0 1 0 .001 4.001A2 2 0 0 0 7 2zm0 6a2 2 0 1 0 .001 4.001A2 2 0 0 0 7 8zm0 6a2 2 0 1 0 .001 4.001A2 2 0 0 0 7 14zm6-8a2 2 0 1 0-.001-4.001A2 2 0 0 0 13 6zm0 2a2 2 0 1 0 .001 4.001A2 2 0 0 0 13 8zm0 6a2 2 0 1 0 .001 4.001A2 2 0 0 0 13 14z" fill="#999"></path>
                  </svg>
                </span>
                <span class="item-text">{{ item.text }}</span>
              </div>
              <div class="item-controls">
                <!-- 显示/隐藏开关 -->
                <el-switch
                  v-model="item.visible"
                  :active-text="item.visible ? '显示' : '隐藏'"
                  inline-prompt
                />
                <!-- 删除按钮 -->
                <button class="delete-btn" @click="deleteItem(item.id)">×</button>
              </div>
            </div>
          </div>
        </div>

        <!-- 添加新项目的控制区 -->
        <div class="controls">
          <input v-model="newItemText" 
                 placeholder="输入新项目"
                 @keyup.enter="addItem">
          <button class="add-btn" @click="addItem">添加</button>
        </div>

        <!-- 保存按钮区域 -->
        <div class="save-container">
          <el-button 
            type="primary" 
            :loading="saving"
            @click="saveChanges"
          >
            保存更改
          </el-button>
        </div>
      </template>
    </div>
  </div>
</template>

<script setup>
// 导入必要的依赖
import { ref, computed, onMounted } from 'vue'
import Sortable from 'sortablejs'
import { ElSwitch, ElButton, ElMessage } from 'element-plus'
import { Loading } from '@element-plus/icons-vue'
import 'element-plus/dist/index.css'

// 定义响应式变量
const listRef = ref(null)           // 列表容器的引用
const newItemText = ref('')         // 新项目的输入文本
const loading = ref(true)           // 加载状态
const saving = ref(false)           // 保存状态
const items = ref([])               // 列表数据

// 计算属性：获取可拖拽项目（除第一个固定项目外的所有项目）
const draggableItems = computed(() => {
  return items.value.slice(1)
})
// 模拟后端 API 接口
const mockApi = {
  // 获取列表数据
  getItems: () => {
    return new Promise((resolve) => {
      setTimeout(() => {
        // 模拟从服务器获取的初始数据
        resolve([
          { id: 1, text: '固定项目（不可拖动）', color: '#fff', visible: true },
          { id: 2, text: '项目 2', color: '#fff', visible: true },
          { id: 3, text: '项目 3', color: '#fff', visible: true },
          { id: 4, text: '项目 4', color: '#fff', visible: true },
          { id: 5, text: '项目 5', color: '#fff', visible: true }
        ])
      }, 1000) // 模拟网络延迟
    })
  },
  
  // 保存列表数据
  saveItems: (data) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        // 模拟向服务器保存数据
        console.log('向服务器保存的数据:', data)
        resolve({ success: true })
      }, 1500)
    })
  },
  
  // 删除项目
  deleteItem: (id) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        // 模拟删除操作
        console.log('删除项目ID:', id)
        resolve({ success: true })
      }, 500)
    })
  },
  
  // 添加项目
  addItem: (item) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        // 模拟添加操作并返回带有新ID的项目
        const newItem = { ...item, id: Date.now() }
        console.log('添加新项目:', newItem)
        resolve(newItem)
      }, 500)
    })
  }
}

// 获取初始列表数据
const fetchItems = async () => {
  try {
    loading.value = true
    const data = await mockApi.getItems()
    items.value = data
  } catch (error) {
    ElMessage.error('加载数据失败')
    console.error('获取数据错误:', error)
  } finally {
    loading.value = false
  }
}

// 保存所有更改
const saveChanges = async () => {
  try {
    saving.value = true
    await mockApi.saveItems(items.value)
    ElMessage.success('保存成功')
  } catch (error) {
    ElMessage.error('保存失败')
    console.error('保存错误:', error)
  } finally {
    saving.value = false
  }
}

// 添加新项目
const addItem = async () => {
  // 验证输入不为空
  if (!newItemText.value.trim()) return
  
  try {
    // 创建新项目对象
    const newItem = {
      text: newItemText.value,
      color: '#fff',
      visible: true
    }
    
    // 调用API保存新项目
    const savedItem = await mockApi.addItem(newItem)
    // 添加到列表中
    items.value.push(savedItem)
    // 清空输入框
    newItemText.value = ''
    ElMessage.success('添加成功')
  } catch (error) {
    ElMessage.error('添加失败')
    console.error('添加错误:', error)
  }
}

// 删除项目
const deleteItem = async (id) => {
  try {
    // 调用API删除项目
    await mockApi.deleteItem(id)
    // 从列表中移除项目
    const index = items.value.findIndex(item => item.id === id)
    if (index !== -1 && index !== 0) { // 确保不删除第一个固定项目
      items.value.splice(index, 1)
      ElMessage.success('删除成功')
    }
  } catch (error) {
    ElMessage.error('删除失败')
    console.error('删除错误:', error)
  }
}

// 初始化拖拽功能
const initializeSortable = () => {
  new Sortable(listRef.value, {
    animation: 150,               // 动画过渡时间
    handle: '.drag-handle',       // 拖拽手柄选择器
    ghostClass: 'ghost',          // 拖动时的幽灵类名
    
    // 开始拖动时的回调
    onStart: (evt) => {
      const realIndex = evt.oldIndex + 1  // 计算真实索引（考虑固定项）
      const item = items.value[realIndex]
      item.color = '#f0f0f0'  // 改变被拖动项的背景色
    },
    
    // 结束拖动时的回调
    onEnd: (evt) => {
      const realOldIndex = evt.oldIndex + 1
      const realNewIndex = evt.newIndex + 1
      
      // 更新列表顺序
      const newItems = [...items.value]
      const itemMove = newItems.splice(realOldIndex, 1)[0]
      newItems.splice(realNewIndex, 0, itemMove)
      itemMove.color = '#fff'  // 恢复原始背景色
      items.value = newItems
    }
  })
}

// 组件挂载时初始化
onMounted(async () => {
  await fetchItems()      // 获取初始数据
  initializeSortable()    // 初始化拖拽功能
})
</script>
<style scoped>
/* 容器基础样式 */
.container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  font-family: Arial, sans-serif;
}

.list-container {
  width: 400px;
  margin: 20px auto;
}

/* 加载状态样式 */
.loading-container {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  height: 200px;
  color: #909399;
}

.loading-icon {
  animation: rotating 2s linear infinite;
}

@keyframes rotating {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

/* 列表样式 */
.draggable-list {
  width: 100%;
  margin-bottom: 20px;
}

/* 列表项样式 */
.list-item {
  padding: 12px 16px;
  margin: 8px 0;
  border: 1px solid #e4e7ed;
  border-radius: 4px;
  transition: all 0.3s;
  background-color: #fff;
}

/* 第一个固定项目的特殊样式 */
.first-item {
  background-color: #f8f9fa !important;
  border: 1px solid #dde0e3;
}

/* 鼠标悬停效果 */
.list-item:hover {
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* 列表项内容布局 */
.item-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.item-left {
  display: flex;
  align-items: center;
  gap: 8px;
}

/* 拖拽手柄样式 */
.drag-handle {
  cursor: move;
  padding: 4px;
  display: flex;
  align-items: center;
}

/* 锁定图标样式 */
.lock-icon {
  padding: 4px;
  display: flex;
  align-items: center;
}

/* 拖拽手柄悬停效果 */
.drag-handle:hover {
  background-color: #f5f5f5;
  border-radius: 4px;
}

/* 控制按钮区域样式 */
.item-controls {
  display: flex;
  align-items: center;
  gap: 10px;
}

/* 拖动时的幽灵样式 */
.ghost {
  opacity: 0.5;
  background: #c8ebfb !important;
}

/* 删除按钮样式 */
.delete-btn {
  background: none;
  border: none;
  color: #999;
  cursor: pointer;
  font-size: 18px;
  padding: 0 5px;
  transition: color 0.3s;
}

.delete-btn:hover {
  color: #ff4444;
}

/* 添加控件区域样式 */
.controls {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
}

/* 输入框样式 */
input {
  flex: 1;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

/* 添加按钮样式 */
.add-btn {
  padding: 8px 16px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.add-btn:hover {
  background-color: #45a049;
}

/* 保存按钮容器样式 */
.save-container {
  display: flex;
  justify-content: center;
  margin-top: 20px;
}

/* 响应式适配 */
@media (max-width: 480px) {
  .list-container {
    width: 100%;
    padding: 0 10px;
  }
  
  .controls {
    flex-direction: column;
  }
  
  .add-btn {
    width: 100%;
  }
}
</style>
