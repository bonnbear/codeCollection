<template>
  <div
    class="centered-arrow-dropdown"
    ref="dropdownRef"
    :class="{ 'is-open': isOpen }"
  >
    <!-- 触发器 -->
    <div class="dropdown-trigger" ref="triggerRef" @click="toggleDropdown">
      <span class="trigger-text">{{ selectedItem.label }}</span>
      <svg class="arrow-icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg"><path fill="currentColor" d="M104.704 338.752a64 64 0 0 1 90.496 0l316.8 316.8 316.8-316.8a64 64 0 0 1 90.496 90.496L557.248 791.296a64 64 0 0 1-90.496 0L104.704 429.248a64 64 0 0 1 0-90.496z"></path></svg>
    </div>

    <!-- 下拉菜单 (Popper) -->
    <div
      v-if="isOpen"
      class="dropdown-popper"
      :style="menuStyle"
    >
      <!-- 
        核心改动在这里的 CSS 中实现 
      -->
      <div class="popper-arrow"></div>
      <ul class="menu-list">
        <li
          v-for="item in menuItems"
          :key="item.value"
          class="menu-item"
          :class="{ 'is-active': item.value === selectedItem.value }"
          @click="handleItemClick(item)"
        >
          {{ item.label }}
        </li>
      </ul>
    </div>
  </div>
</template>

<script setup>
// JavaScript 部分与上一版完全相同，因为定位逻辑不需要改变
import { ref, watch, nextTick, onBeforeUnmount } from 'vue';

const menuItems = ref([
  { label: '黄金糕', value: 'gold-cake' },
  { label: '狮子头', value: 'lion-head' },
  { label: '螺蛳粉', value: 'snail-noodle' },
  { label: '双皮奶', value: 'double-milk' },
  { label: '蚵仔煎', value: 'oyster-omelette' },
]);

const selectedItem = ref(menuItems.value[0]);
const isOpen = ref(false);
const menuStyle = ref({});
const dropdownRef = ref(null);
const triggerRef = ref(null);

const calculatePosition = () => {
  const containerEl = dropdownRef.value;
  const triggerEl = triggerRef.value;
  if (!containerEl || !triggerEl) return;

  const zoomFactor = containerEl.getBoundingClientRect().width / containerEl.offsetWidth;
  if (!zoomFactor || zoomFactor === 0) return;

  const topOffset = triggerEl.offsetHeight + 8;
  const correctedTop = topOffset / zoomFactor;

  menuStyle.value = {
    top: `${correctedTop}px`,
    left: '0px',
    width: `${containerEl.offsetWidth}px`,
  };
};

const toggleDropdown = () => { isOpen.value = !isOpen.value; };
const closeMenu = () => { isOpen.value = false; };

const handleItemClick = (item) => {
  selectedItem.value = item;
  closeMenu();
};

const handleClickOutside = (event) => {
  if (dropdownRef.value && !dropdownRef.value.contains(event.target)) {
    closeMenu();
  }
};

watch(isOpen, (isNowOpen) => {
  if (isNowOpen) {
    nextTick(() => {
      calculatePosition();
      document.addEventListener('click', handleClickOutside);
      window.addEventListener('resize', calculatePosition);
    });
  } else {
    document.removeEventListener('click', handleClickOutside);
    window.removeEventListener('resize', calculatePosition);
  }
});

onBeforeUnmount(() => {
  document.removeEventListener('click', handleClickOutside);
  window.removeEventListener('resize', calculatePosition);
});
</script>

<style scoped>
/* 样式与上一版基本相同 */
.centered-arrow-dropdown {
  position: relative;
  display: inline-block;
  width: 200px;
  user-select: none;
}

.dropdown-trigger {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 8px 12px;
  font-size: 14px;
  color: #606266;
  background-color: #ffffff;
  border: 1px solid #dcdfe6;
  border-radius: 4px;
  cursor: pointer;
  transition: border-color 0.2s;
}

.centered-arrow-dropdown.is-open .dropdown-trigger,
.dropdown-trigger:hover {
  border-color: #409eff;
}

.trigger-text {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.arrow-icon {
  flex-shrink: 0;
  margin-left: 8px;
  width: 12px;
  height: 12px;
  transition: transform 0.3s;
  color: #909399;
}

.centered-arrow-dropdown.is-open .arrow-icon {
  transform: rotate(180deg);
}

.dropdown-popper {
  position: absolute;
  top: 100%;
  left: 0;
  z-index: 10;
  padding: 6px 0;
  background-color: #ffffff;
  border: 1px solid #e4e7ed;
  border-radius: 4px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
}

/*
 * --- 核心改动在这里 ---
 */
.popper-arrow {
  position: absolute;
  width: 12px;
  height: 12px;
  top: -7px;
  
  /* 1. 将左边距设置为 50% */
  left: 50%;
  
  background: #ffffff;
  border-top: 1px solid #e4e7ed;
  border-left: 1px solid #e4e7ed;
  
  /* 2. 使用 transform 将箭头向左移动自身宽度的一半，实现完美居中，并保持旋转 */
  transform: translateX(-50%) rotate(45deg);
  
  z-index: -1;
}

.menu-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

.menu-item {
  padding: 8px 20px;
  font-size: 14px;
  color: #606266;
  cursor: pointer;
  transition: background-color 0.2s;
}

.menu-item:hover {
  background-color: #f5f7fa;
}

.menu-item.is-active {
  color: #409eff;
  font-weight: bold;
}
</style>
