<template>
  <el-dialog
    v-model="dialogVisible"
    title="数据分析"
    :fullscreen="false"
    :close-on-click-modal="false"
    destroy-on-close
    class="custom-dialog"
  >
    <div class="analysis-container">
      <!-- 上部分图表容器 -->
      <div class="charts-container">
        <div ref="chartRef1" class="chart"></div>
        <div ref="chartRef2" class="chart"></div>
      </div>
      
      <!-- 下部分表格 -->
      <div class="table-container">
        <el-table 
          :data="tableData" 
          border 
          style="width: 100%"
          :height="tableHeight"
        >
          <el-table-column prop="date" label="日期" width="180" fixed />
          
          <el-table-column label="配送信息">
            <el-table-column prop="name" label="姓名" width="120" />
            <el-table-column prop="address" label="地址" />
          </el-table-column>
          
          <el-table-column label="商品信息">
            <el-table-column prop="product" label="商品名称" width="120" />
            <el-table-column prop="count" label="数量" width="120" />
          </el-table-column>
        </el-table>
      </div>
    </div>
  </el-dialog>
</template>

<script setup>
import { ref, onMounted, nextTick } from 'vue'
import * as echarts from 'echarts'

const dialogVisible = ref(true)
const chartRef1 = ref(null)
const chartRef2 = ref(null)
const tableHeight = ref('300px')
let chart1Instance = null
let chart2Instance = null

// 表格数据
const tableData = ref([
  {
    date: '2024-02-17',
    name: '张三',
    address: '北京市朝阳区',
    product: '笔记本电脑',
    count: 1
  },
  {
    date: '2024-02-17',
    name: '李四',
    address: '上海市浦东新区',
    product: '手机',
    count: 2
  },
  {
    date: '2024-02-17',
    name: '王五',
    address: '广州市天河区',
    product: '平板电脑',
    count: 1
  },
  {
    date: '2024-02-17',
    name: '赵六',
    address: '深圳市南山区',
    product: '耳机',
    count: 3
  }
])

// 初始化第一个图表
const initChart1 = () => {
  if (chart1Instance) {
    chart1Instance.dispose()
  }
  chart1Instance = echarts.init(chartRef1.value)
  const option = {
    title: {
      text: '销售数据'
    },
    tooltip: {},
    grid: {
      top: '15%',
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: {
      data: ['1月', '2月', '3月', '4月', '5月', '6月']
    },
    yAxis: {},
    series: [{
      name: '销量',
      type: 'bar',
      data: [5, 20, 36, 10, 10, 20]
    }]
  }
  chart1Instance.setOption(option)
}

// 初始化第二个图表
const initChart2 = () => {
  if (chart2Instance) {
    chart2Instance.dispose()
  }
  chart2Instance = echarts.init(chartRef2.value)
  const option = {
    title: {
      text: '收入数据'
    },
    tooltip: {},
    grid: {
      top: '15%',
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: {
      data: ['1月', '2月', '3月', '4月', '5月', '6月']
    },
    yAxis: {},
    series: [{
      name: '收入',
      type: 'bar',
      data: [15, 25, 40, 20, 15, 30]
    }]
  }
  chart2Instance.setOption(option)
}

// 计算表格高度
const calculateTableHeight = () => {
  const containerHeight = document.querySelector('.analysis-container')?.offsetHeight || 0
  const chartsHeight = document.querySelector('.charts-container')?.offsetHeight || 0
  const padding = 40 // 上下padding总和
  const tableHeight = containerHeight - chartsHeight - padding
  return `${Math.max(tableHeight, 200)}px` // 设置最小高度为200px
}

// 重新调整尺寸
const handleResize = () => {
  nextTick(() => {
    chart1Instance?.resize()
    chart2Instance?.resize()
    tableHeight.value = calculateTableHeight()
  })
}

// 组件挂载后初始化
onMounted(async () => {
  await nextTick()
  initChart1()
  initChart2()
  tableHeight.value = calculateTableHeight()
  
  // 监听窗口调整
  window.addEventListener('resize', handleResize)
})
</script>

<style scoped>
/* 自定义dialog样式 */
:deep(.el-dialog) {
  margin: 5vh auto;
  height: 90vh;
  display: flex;
  flex-direction: column;
}

:deep(.el-dialog__body) {
  flex: 1;
  overflow: hidden;
  padding: 10px 20px;
}

.analysis-container {
  height: 100%;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.charts-container {
  display: flex;
  gap: 20px;
  height: 45%;
  min-height: 300px;
  margin-bottom: 20px;
}

.chart {
  flex: 1;
  min-width: 0; /* 防止flex子项溢出 */
}

.table-container {
  flex: 1;
  overflow: hidden;
}

/* 适配表格样式 */
:deep(.el-table) {
  height: 100% !important;
}
</style>









<template>
  <el-dialog
    v-model="dialogVisible"
    title="数据分析"
    :fullscreen="false"
    :close-on-click-modal="false"
    destroy-on-close
    class="custom-dialog"
  >
    <div class="analysis-container">
      <!-- 上部分图表容器 -->
      <div class="charts-container">
        <!-- 第一个图表 -->
        <div class="chart-wrapper">
          <div ref="chartRef1" class="chart"></div>
          <!-- 自定义悬浮tooltip -->
          <div v-if="showTooltip1" class="custom-tooltip" :style="tooltipStyle1">
            <div class="tooltip-title">{{ tooltipData1.title }}</div>
            <div class="tooltip-content">
              <div class="tooltip-item">
                <span class="label">销量：</span>
                <span class="value">{{ tooltipData1.value }}</span>
              </div>
            </div>
          </div>
        </div>

        <!-- 第二个图表 -->
        <div class="chart-wrapper">
          <div ref="chartRef2" class="chart"></div>
        </div>
      </div>
      
      <!-- 下部分表格 -->
      <div class="table-container">
        <el-table 
          :data="currentPageData" 
          border 
          style="width: 100%"
          :height="tableHeight"
        >
          <el-table-column prop="date" label="日期" width="180" fixed />
          
          <el-table-column label="配送信息">
            <el-table-column prop="name" label="姓名" width="120" />
            <el-table-column prop="address" label="地址" />
          </el-table-column>
          
          <el-table-column label="商品信息">
            <el-table-column prop="product" label="商品名称" width="120" />
            <el-table-column prop="count" label="数量" width="120" />
          </el-table-column>
        </el-table>

        <!-- 分页器 -->
        <div class="pagination-container">
          <el-pagination
            v-model:current-page="currentPage"
            v-model:page-size="pageSize"
            :page-sizes="[5, 10, 20, 50]"
            :total="tableData.length"
            layout="total, sizes, prev, pager, next, jumper"
            @size-change="handleSizeChange"
            @current-change="handleCurrentChange"
          />
        </div>
      </div>
    </div>
  </el-dialog>
</template>

<script setup>
import { ref, computed, onMounted, onBeforeUnmount, nextTick } from 'vue'
import * as echarts from 'echarts'

const dialogVisible = ref(true)
const chartRef1 = ref(null)
const chartRef2 = ref(null)
const tableHeight = ref('300px')
const showTooltip1 = ref(false)
const tooltipData1 = ref({ title: '', value: 0 })
const tooltipStyle1 = ref({ left: '0px', top: '0px' })

// 分页相关
const currentPage = ref(1)
const pageSize = ref(10)

let chart1Instance = null
let chart2Instance = null

// 生成更多的模拟数据
const tableData = ref(Array.from({ length: 50 }, (_, index) => ({
  date: `2024-02-${String(index + 1).padStart(2, '0')}`,
  name: ['张三', '李四', '王五', '赵六'][index % 4],
  address: ['北京市朝阳区', '上海市浦东新区', '广州市天河区', '深圳市南山区'][index % 4],
  product: ['笔记本电脑', '手机', '平板电脑', '耳机'][index % 4],
  count: Math.floor(Math.random() * 5) + 1
})))

// 计算当前页的数据
const currentPageData = computed(() => {
  const start = (currentPage.value - 1) * pageSize.value
  return tableData.value.slice(start, start + pageSize.value)
})

// 分页处理方法
const handleSizeChange = (val) => {
  pageSize.value = val
  currentPage.value = 1
}

const handleCurrentChange = (val) => {
  currentPage.value = val
}

// 初始化第一个图表
const initChart1 = () => {
  if (chart1Instance) {
    chart1Instance.dispose()
  }
  
  chart1Instance = echarts.init(chartRef1.value)
  const data = [5, 20, 36, 10, 10, 20]
  
  const option = {
    title: {
      text: '销售数据'
    },
    tooltip: {
      show: false
    },
    grid: {
      top: '15%',
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: {
      data: ['1月', '2月', '3月', '4月', '5月', '6月']
    },
    yAxis: {},
    series: [{
      name: '销量',
      type: 'bar',
      data: data
    }]
  }
  
  chart1Instance.setOption(option)
  
  // 注册鼠标事件
  chart1Instance.on('mouseover', (params) => {
    showTooltip1.value = true
    tooltipData1.value = {
      title: `${params.name}销量`,
      value: params.value
    }
    tooltipStyle1.value = {
      left: `${params.event.offsetX + 10}px`,
      top: `${params.event.offsetY + 10}px`
    }
  })
  
  chart1Instance.on('mouseout', () => {
    showTooltip1.value = false
  })
}

// 初始化第二个图表
const initChart2 = () => {
  if (chart2Instance) {
    chart2Instance.dispose()
  }
  
  chart2Instance = echarts.init(chartRef2.value)
  const data = Array.from({ length: 24 }, () => Math.floor(Math.random() * 50) + 10)
  
  const option = {
    title: {
      text: '收入数据'
    },
    tooltip: {},
    grid: {
      top: '15%',
      left: '3%',
      right: '4%',
      bottom: '12%',
      containLabel: true
    },
    xAxis: {
      data: Array.from({ length: 24 }, (_, i) => `${i + 1}月`),
      axisLabel: {
        interval: 0
      }
    },
    yAxis: {},
    dataZoom: [
      {
        type: 'slider',
        show: true,
        xAxisIndex: [0],
        start: 0,
        end: 50,
        height: 8,
        showDetail: false,
        fillerColor: '#909399',
        borderColor: 'transparent',
        handleIcon: 'path://M-9.35,34.56V42m0-40V9.5m-2,0h4a2,2,0,0,1,2,2v21a2,2,0,0,1-2,2h-4a2,2,0,0,1-2-2v-21A2,2,0,0,1-11.35,9.5Z',
        handleSize: 0,
        handleStyle: {
          color: '#606266',
          borderColor: 'transparent'
        },
        moveHandleStyle: {
          color: '#606266'
        },
        emphasis: {
          handleStyle: {
            color: '#606266'
          },
          moveHandleStyle: {
            color: '#606266'
          }
        },
        backgroundColor: '#f5f5f5',
        dataBackground: {
          lineStyle: {
            color: 'transparent'
          },
          areaStyle: {
            color: 'transparent'
          }
        },
        selectedDataBackground: {
          lineStyle: {
            color: 'transparent'
          },
          areaStyle: {
            color: 'transparent'
          }
        },
        brushStyle: {
          color: 'rgba(144,147,153,0.3)'
        }
      },
      {
        type: 'inside',
        xAxisIndex: [0],
        start: 0,
        end: 50,
        zoomOnMouseWheel: true,
        moveOnMouseMove: true
      }
    ],
    series: [{
      name: '收入',
      type: 'bar',
      data: data
    }]
  }
  
  chart2Instance.setOption(option)
}
// 计算表格高度
const calculateTableHeight = () => {
  const containerHeight = document.querySelector('.analysis-container')?.offsetHeight || 0
  const chartsHeight = document.querySelector('.charts-container')?.offsetHeight || 0
  const paginationHeight = 50
  const padding = 40
  const tableHeight = containerHeight - chartsHeight - paginationHeight - padding
  return `${Math.max(tableHeight, 200)}px`
}

// 重新调整尺寸
const handleResize = () => {
  nextTick(() => {
    chart1Instance?.resize()
    chart2Instance?.resize()
    tableHeight.value = calculateTableHeight()
  })
}

// 组件挂载后初始化
onMounted(async () => {
  await nextTick()
  initChart1()
  initChart2()
  tableHeight.value = calculateTableHeight()
  
  window.addEventListener('resize', handleResize)
})

// 组件销毁前清理
onBeforeUnmount(() => {
  window.removeEventListener('resize', handleResize)
  if (chart1Instance) chart1Instance.dispose()
  if (chart2Instance) chart2Instance.dispose()
})
</script>

<style scoped>
/* 自定义dialog样式 */
:deep(.el-dialog) {
  margin: 5vh auto;
  height: 90vh;
  display: flex;
  flex-direction: column;
}

:deep(.el-dialog__body) {
  flex: 1;
  overflow: hidden;
  padding: 10px 20px;
}

.analysis-container {
  height: 100%;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.charts-container {
  display: flex;
  gap: 20px;
  height: 45%;
  min-height: 300px;
  margin-bottom: 20px;
}

.chart-wrapper {
  flex: 1;
  position: relative;
  min-width: 0;
}

.chart {
  width: 100%;
  height: 100%;
}

.table-container {
  flex: 1;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

/* 自定义tooltip样式 */
.custom-tooltip {
  position: absolute;
  background: rgba(255, 255, 255, 0.9);
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 10px;
  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);
  pointer-events: none;
  z-index: 100;
}

.tooltip-title {
  font-weight: bold;
  margin-bottom: 5px;
}

.tooltip-content .tooltip-item {
  display: flex;
  align-items: center;
}

.tooltip-item .label {
  color: #666;
  margin-right: 5px;
}

.tooltip-item .value {
  font-weight: bold;
  color: #409EFF;
}

/* 分页容器样式 */
.pagination-container {
  padding: 10px 0;
  display: flex;
  justify-content: flex-end;
}

/* 适配表格样式 */
:deep(.el-table) {
  flex: 1;
}

/* 自定义 dataZoom 滚动条样式 */
:deep(.echarts-dataview) {
  box-shadow: none !important;
}

/* 确保图表在容器中完全展示 */
:deep(.echarts) {
  width: 100% !important;
  height: 100% !important;
}

/* 优化图表容器的响应式表现 */
.chart-wrapper {
  background: #fff;
  border-radius: 4px;
  padding: 12px;
  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
}
</style>






<template>
  <div class="chart-container">
    <div ref="chartRef" class="chart"></div>
  </div>
</template>

<script setup>
import { ref, onMounted, onBeforeUnmount } from 'vue'
import * as echarts from 'echarts'

const chartRef = ref(null)
let chartInstance = null

const data = [
  { name: '状态1', value: 400 },
  { name: '状态2', value: 300 },
  { name: '状态3', value: 500 },
  { name: '状态4', value: 200 },
  { name: '状态5', value: 278 },
  { name: '状态6', value: 189 },
  { name: '状态7', value: 239 },
  { name: '状态8', value: 349 },
  { name: '状态9', value: 428 },
  { name: '状态10', value: 568 }
]

const initChart = () => {
  if (chartInstance) {
    chartInstance.dispose()
  }
  
  chartInstance = echarts.init(chartRef.value)
  
  const option = {
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow'
      }
    },
    legend: {
      top: '2%',
      right: '2%',
      orient: 'vertical',
      itemWidth: 10,
      itemHeight: 10,
      icon: 'rect',
      formatter: function(name) {
        const item = data.find(item => item.name === name)
        if (item) {
          return `${name}  {value|${item.value}}`
        }
        return name
      },
      textStyle: {
        rich: {
          value: {
            color: '#999',
            fontSize: 12,
            padding: [0, 0, 0, 10]
          }
        }
      }
    },
    grid: {
      top: '15%',
      left: '3%',
      right: '15%',
      bottom: '15%', // 为底部dataZoom留出空间
      containLabel: true
    },
    dataZoom: [
      {
        show: true,
        type: 'slider',
        bottom: '3%',
        height: 20,
        start: 0,
        end: 100,
        borderColor: 'transparent',
        backgroundColor: '#f5f5f5',
        fillerColor: '#e6e6e6',
        handleStyle: {
          color: '#fff',
          borderColor: '#9f9f9f'
        },
        moveHandleStyle: {
          color: '#fff',
          borderColor: '#9f9f9f'
        },
        selectedDataBackground: {
          lineStyle: {
            color: '#5470c6'
          },
          areaStyle: {
            color: '#5470c6'
          }
        },
        emphasis: {
          handleStyle: {
            borderColor: '#777'
          },
          moveHandleStyle: {
            borderColor: '#777'
          }
        }
      },
      {
        type: 'inside', // 启用内部缩放
        start: 0,
        end: 100,
        zoomOnMouseWheel: true,  // 鼠标滚轮缩放
        moveOnMouseMove: true    // 鼠标移动平移
      }
    ],
    xAxis: {
      type: 'category',
      data: data.map(item => item.name),
      axisTick: {
        show: false
      },
      axisLine: {
        show: false
      }
    },
    yAxis: {
      type: 'value',
      name: '数量',
      splitLine: {
        lineStyle: {
          type: 'dashed'
        }
      },
      axisTick: {
        show: false
      },
      axisLine: {
        show: false
      }
    },
    series: [
      {
        name: '状态1',
        type: 'bar',
        barWidth: 16,
        barGap: '80%',
        itemStyle: {
          borderRadius: [2, 2, 0, 0],
          color: '#5470c6'
        },
        data: data.map(item => ({
          value: item.value,
          label: {
            show: true,
            position: 'top',
            fontSize: 16
          }
        }))
      }
    ]
  }

  chartInstance.setOption(option)
}

// 处理窗口缩放
const handleResize = () => {
  chartInstance?.resize()
}

onMounted(() => {
  initChart()
  window.addEventListener('resize', handleResize)
})

onBeforeUnmount(() => {
  chartInstance?.dispose()
  window.removeEventListener('resize', handleResize)
})
</script>

<style scoped>
.chart-container {
  width: 100%;
  position: relative;
}

.chart {
  height: 400px;
  min-width: 800px;
}
</style>
