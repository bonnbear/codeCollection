<template>
  <div ref="chartContainer" style="width: 100%; height: 400px;"></div>
</template>

<script setup>
import { ref, onMounted, onUnmounted } from 'vue'
import * as echarts from 'echarts'

const chartContainer = ref(null)
let chart = null

// 配置映射，支持混合类型
const peizhiMap = {
  collectA: { properties: ['typeA', 'typeB'], type: 'numeric' }, // 仅数值
  collectB: { properties: ['typeF', 'typeH'], type: 'status', successValue: '已刷新' }, // 仅状态
  collectC: { properties: ['typeC', 'typeF'], type: 'mixed', successValue: '已刷新' } // 数值 + 状态混合
}

// 中文映射
const propertyMap = {
  collectA: '组合A',
  collectB: '组合B',
  collectC: '组合C'
}

// 示例数据
const data = [
  { name: "Object1", typeA: 0, typeB: 20, typeC: 0, typeD: 0, typeE: 50, typeF: "已刷新", typeH: "未刷新", status: "状态1" },
  { name: "Object2", typeA: 15, typeB: 0, typeC: 0, typeD: 45, typeE: 0, typeF: "未刷新", typeH: "未刷新", status: "状态2" },
  { name: "Object3", typeA: 0, typeB: 0, typeC: 5, typeD: 0, typeE: 0, typeF: "未刷新", typeH: "未刷新", status: "状态3" }
]

const processData = (items) => {
  return items.map(item => {
    let completed = []
    let incomplete = []

    // 处理合并字段
    Object.keys(peizhiMap).forEach(collectKey => {
      const { properties, type, successValue } = peizhiMap[collectKey]

      let hasCompleted = false

      if (type === 'numeric') {
        // 纯数值类型：如果任意一个大于 0，则算作已作业
        hasCompleted = properties.some(prop => item[prop] > 0)
      } else if (type === 'status') {
        // 纯状态类型：如果任意一个等于成功值（如 "已刷新"），则算作已作业
        hasCompleted = properties.some(prop => item[prop] === successValue)
      } else if (type === 'mixed') {
        // 混合类型：数值 > 0 或 状态 = successValue，则算作已作业
        hasCompleted = properties.some(prop => {
          return typeof item[prop] === 'number' ? item[prop] > 0 : item[prop] === successValue
        })
      }

      if (hasCompleted) {
        completed.push(collectKey)
      } else {
        incomplete.push(collectKey)
      }
    })

    return { name: item.name, status: item.status, completed, incomplete }
  })
}

const formatItemsTwoPerRow = (items) => {
  if (!items.length) return '<div style="color: #999;">无</div>'
  
  const rows = []
  for (let i = 0; i < items.length; i += 2) {
    const first = `<span style="margin-right: 20px;">${propertyMap[items[i]]}</span>`
    const second = items[i + 1] ? `<span>${propertyMap[items[i + 1]]}</span>` : ''

    rows.push(`<div style="display: flex;">${first}${second}</div>`)
  }
  return rows.join('')
}

const initChart = () => {
  if (chart) {
    chart.dispose()
  }

  const processedData = processData(data)
  chart = echarts.init(chartContainer.value)

  const option = {
    tooltip: {
      trigger: 'item',
      axisPointer: { type: 'shadow' },
      formatter: function (params) {
        if (!params || params.dataIndex === undefined) {
          return ''
        }

        const dataIndex = params.dataIndex
        const item = processedData[dataIndex]

        if (!item) {
          return ''
        }

        return `
          <div style="font-size: 14px;">
            <div><strong>${item.name}</strong></div>
            <div>当前状态: ${item.status}</div>

            <div style="margin-top: 5px; display: flex; align-items: center;">
              <span style="display: inline-block; width: 10px; height: 10px; background-color: #91cc75; margin-right: 5px;"></span>
              <span style="font-weight: bold;">已作业</span>
            </div>
            ${formatItemsTwoPerRow(item.completed)}

            <div style="margin-top: 5px; display: flex; align-items: center;">
              <span style="display: inline-block; width: 10px; height: 10px; background-color: #ee6666; margin-right: 5px;"></span>
              <span style="font-weight: bold;">未作业</span>
            </div>
            ${formatItemsTwoPerRow(item.incomplete)}
          </div>
        `
      }
    },
    legend: {
      data: ['已作业', '未作业']
    },
    xAxis: {
      type: 'category',
      data: processedData.map(item => item.name)
    },
    yAxis: {
      type: 'value'
    },
    series: [
      {
        name: '已作业',
        type: 'bar',
        stack: 'total',
        data: processedData.map(item => item.completed.length),
        itemStyle: { color: '#91cc75' }
      },
      {
        name: '未作业',
        type: 'bar',
        stack: 'total',
        data: processedData.map(item => item.incomplete.length),
        itemStyle: { color: '#ee6666' }
      }
    ]
  }

  chart.setOption(option)
}

onMounted(() => {
  initChart()
  window.addEventListener('resize', initChart)
})

onUnmounted(() => {
  if (chart) {
    chart.dispose()
  }
  window.removeEventListener('resize', initChart)
})
</script>