<template>
  <div ref="chartRef" style="width: 100%; height: 400px;"></div>
</template>

<script setup>
import { ref, onMounted, onUnmounted } from 'vue'
import * as echarts from 'echarts'

const chartRef = ref(null)
let chart = null

// 模拟数据
const data = Array.from({ length: 50 }, (_, index) => ({
  name: `类别${index + 1}`,
  value: Math.floor(Math.random() * 1000)
}))

const initChart = () => {
  if (chart) {
    chart.dispose()
  }

  chart = echarts.init(chartRef.value)
  
  const containerWidth = chartRef.value.clientWidth
  const barWidth = 20  // 固定柱子宽度
  const barGap = '30%' // 柱子间距
  const totalBars = data.length
  const minBarSpace = barWidth * 1.3
  
  const needScroll = (totalBars * minBarSpace) > containerWidth
  
  const option = {
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow'
      }
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: needScroll ? '60' : '10',
      containLabel: true
    },
    dataZoom: needScroll ? [
      {
        type: 'slider',
        show: true,
        start: 0,
        end: (containerWidth / (totalBars * minBarSpace)) * 100,
        height: 20,
        bottom: 10,
        borderColor: 'transparent',
        backgroundColor: '#f5f5f5',
        fillerColor: '#e6e6e6',
        handleStyle: {
          color: '#fff',
          borderColor: '#ACB8D1',
          borderWidth: 1,
          shadowBlur: 2,
          shadowColor: 'rgba(0,0,0,0.2)',
          shadowOffsetX: 0,
          shadowOffsetY: 0
        },
        moveHandleStyle: {
          color: '#fff',
          borderColor: '#ACB8D1'
        },
        selectedDataBackground: {
          lineStyle: {
            color: '#ACB8D1'
          },
          areaStyle: {
            color: '#ACB8D1'
          }
        },
        emphasis: {
          handleStyle: {
            borderColor: '#8392A5'
          },
          moveHandleStyle: {
            borderColor: '#8392A5'
          }
        },
        dataBackground: {
          lineStyle: {
            color: '#2f4554',
            width: 0.5
          },
          areaStyle: {
            color: '#e6e6e6'
          }
        },
        brushSelect: false,
        textStyle: {
          color: '#333'
        }
      },
      {
        type: 'inside',
        start: 0,
        end: (containerWidth / (totalBars * minBarSpace)) * 100
      }
    ] : [],
    xAxis: {
      type: 'category',
      data: data.map(item => item.name),
      axisLabel: {
        interval: 0,
        rotate: 30
      }
    },
    yAxis: {
      type: 'value',
      name: '数值'
    },
    series: [
      {
        name: '数值',
        type: 'bar',
        barWidth: barWidth,
        barGap: barGap,
        data: data.map(item => item.value),
        itemStyle: {
          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
            { offset: 0, color: '#83bff6' },
            { offset: 0.5, color: '#188df0' },
            { offset: 1, color: '#188df0' }
          ])
        },
        emphasis: {
          itemStyle: {
            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
              { offset: 0, color: '#2378f7' },
              { offset: 0.7, color: '#2378f7' },
              { offset: 1, color: '#83bff6' }
            ])
          }
        }
      }
    ]
  }

  chart.setOption(option)
}

// 处理窗口大小变化
const handleResize = () => {
  chart && initChart()
}

onMounted(() => {
  initChart()
  window.addEventListener('resize', handleResize)
})

onUnmounted(() => {
  window.removeEventListener('resize', handleResize)
  chart && chart.dispose()
})
</script>

<style scoped>
/* 如果需要添加自定义样式可以在这里添加 */
</style>
