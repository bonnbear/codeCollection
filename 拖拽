<template>
  <div class="container">
    <button class="open-btn" @click="showDialog = true">打开拖拽面板</button>

    <div class="dialog" v-if="showDialog">
      <div class="dialog-content">
        <div class="dialog-header">
          <h3>拖拽排序</h3>
          <button class="close-btn" @click="showDialog = false">&times;</button>
        </div>

        <div class="dialog-body">
          <div class="area">
            <h4>区域 1</h4>
            <draggable 
              v-model="list1"
              :group="{ name: 'items', pull: true, put: true }"
              item-key="id"
              class="items-container"
              :animation="300"
              :delay="50"
              :delayOnTouchOnly="true"
              ghost-class="ghost-item"
              chosen-class="chosen-item"
              drag-class="dragging-item"
              @start="onDragStart"
              @end="onDragEnd"
            >
              <template #item="{ element, index }">
                <div class="drag-item" :data-index="index">
                  <div class="item-content">
                    <div class="drag-handle">⋮⋮</div>
                    <button class="delete-btn" @click.stop="removeItem(1, index)">&times;</button>
                    <img :src="element.icon" alt="icon">
                    <span>{{ element.name }}</span>
                  </div>
                </div>
              </template>
            </draggable>
          </div>

          <div class="area">
            <h4>区域 2</h4>
            <draggable 
              v-model="list2"
              :group="{ name: 'items', pull: true, put: true }"
              item-key="id"
              class="items-container"
              :animation="300"
              :delay="50"
              :delayOnTouchOnly="true"
              ghost-class="ghost-item"
              chosen-class="chosen-item"
              drag-class="dragging-item"
              @start="onDragStart"
              @end="onDragEnd"
            >
              <template #item="{ element, index }">
                <div class="drag-item area2" :data-index="index">
                  <div class="item-content">
                    <div class="drag-handle">⋮⋮</div>
                    <button class="delete-btn" @click.stop="removeItem(2, index)">&times;</button>
                    <img :src="element.icon" alt="icon">
                    <span>{{ element.name }}</span>
                  </div>
                </div>
              </template>
            </draggable>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import draggable from 'vuedraggable'

const showDialog = ref(false)
const draggedElement = ref(null)
const draggedRect = ref(null)

const list1 = ref([
  { id: 1, name: '项目 1', icon: '📱' },
  { id: 2, name: '项目 2', icon: '💻' },
  { id: 3, name: '项目 3', icon: '🖥' },
  { id: 4, name: '项目 4', icon: '⌨️' },
])

const list2 = ref([
  { id: 5, name: '项目 5', icon: '🖱' },
  { id: 6, name: '项目 6', icon: '🖨' },
  { id: 7, name: '项目 7', icon: '📷' },
  { id: 8, name: '项目 8', icon: '📺' },
])

const removeItem = (listNumber, index) => {
  if (listNumber === 1) {
    list1.value.splice(index, 1)
  } else {
    list2.value.splice(index, 1)
  }
}

const onDragStart = (evt) => {
  draggedElement.value = evt.item
  draggedRect.value = evt.item.getBoundingClientRect()
  
  // 添加拖拽开始的类
  evt.item.classList.add('dragging')
  
  // 获取所有同容器内的其他项目
  const container = evt.item.closest('.items-container')
  const items = container.querySelectorAll('.drag-item:not(.dragging)')
  
  // 记录初始位置
  items.forEach(item => {
    const rect = item.getBoundingClientRect()
    item.dataset.originalX = rect.left
    item.dataset.originalY = rect.top
  })
}

const onDragEnd = (evt) => {
  if (draggedElement.value) {
    draggedElement.value.classList.remove('dragging')
    draggedElement.value = null
    draggedRect.value = null
    
    // 移除所有临时样式和数据
    const items = document.querySelectorAll('.drag-item')
    items.forEach(item => {
      item.style.transform = ''
      delete item.dataset.originalX
      delete item.dataset.originalY
    })
  }
}
</script>

<style scoped>
.container {
  padding: 20px;
}

.open-btn {
  padding: 8px 16px;
  background: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background 0.3s;
}

.open-btn:hover {
  background: #45a049;
}

.dialog {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.dialog-content {
  background: white;
  border-radius: 8px;
  width: 80%;
  max-width: 800px;
  max-height: 90vh;
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.dialog-header {
  padding: 16px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.close-btn {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  padding: 0 8px;
  transition: color 0.3s;
}

.close-btn:hover {
  color: #ff4444;
}

.dialog-body {
  padding: 20px;
  max-height: calc(90vh - 100px);
  overflow-y: auto;
}

.area {
  margin-bottom: 30px;
}

.area h4 {
  margin: 0 0 10px 0;
  color: #333;
  font-size: 1.1em;
}

.items-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 16px;
  min-height: 120px;
  padding: 16px;
  background: #f8f9fa;
  border: 2px dashed #ccc;
  border-radius: 8px;
  transition: background 0.3s, border-color 0.3s;
  position: relative;
}

.items-container:hover {
  border-color: #2196F3;
  background: #fafafa;
}

.drag-item {
  aspect-ratio: 1;
  background: white;
  border: 1px solid #ddd;
  border-radius: 8px;
  cursor: move;
  position: relative;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  will-change: transform;
}

.drag-handle {
  position: absolute;
  top: 8px;
  right: 8px;
  color: #999;
  cursor: move;
  font-size: 16px;
  opacity: 0;
  transition: opacity 0.3s;
}

.delete-btn {
  position: absolute;
  top: 8px;
  left: 8px;
  width: 24px;
  height: 24px;
  background: #ff4444;
  color: white;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  opacity: 0;
  transition: all 0.3s ease;
  z-index: 2;
}

.delete-btn:hover {
  background: #ff0000;
  transform: scale(1.1);
}

.drag-item:hover .delete-btn,
.drag-item:hover .drag-handle {
  opacity: 1;
}

.drag-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  border-color: #2196F3;
}

.drag-item.area2 {
  background: #e3f2fd;
}

.ghost-item {
  opacity: 0;
  background: transparent !important;
  border: 2px dashed #4CAF50 !important;
}

.dragging-item {
  transform: scale(1.05) !important;
  box-shadow: 0 8px 20px rgba(0,0,0,0.15) !important;
  z-index: 999;
  opacity: 0.9;
  background: white !important;
}

.dragging-item::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(33, 150, 243, 0.1);
  border-radius: 8px;
  z-index: -1;
}

.item-content {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  user-select: none;
  padding: 12px;
}

.item-content img {
  font-size: 28px;
  margin-bottom: 12px;
}

/* 拖拽时的动画效果 */
.items-container .drag-item {
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.items-container .drag-item:not(.dragging):not(.ghost-item) {
  transform-origin: center;
}

/* 被挤开的元素动画 */
.items-container .drag-item.shift-right {
  transform: translateX(calc(100% + 16px));
}

.items-container .drag-item.shift-left {
  transform: translateX(calc(-100% - 16px));
}

.items-container .drag-item.shift-up {
  transform: translateY(calc(-100% - 16px));
}

.items-container .drag-item.shift-down {
  transform: translateY(calc(100% + 16px));
}

/* 响应式布局 */
@media (max-width: 768px) {
  .items-container {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (max-width: 576px) {
  .items-container {
    grid-template-columns: repeat(2, 1fr);
  }
}
</style>











<template>
  <div class="container">
    <button class="open-btn" @click="showDialog = true">打开拖拽面板</button>

    <div class="dialog" v-if="showDialog">
      <div class="dialog-content">
        <div class="dialog-header">
          <h3>拖拽排序</h3>
          <button class="close-btn" @click="showDialog = false">&times;</button>
        </div>

        <div class="dialog-body">
          <div class="area">
            <h4>区域 1</h4>
            <draggable 
              v-model="list1"
              :group="{ name: 'items', pull: true, put: true }"
              item-key="id"
              class="items-container"
              :animation="300"
              :delay="50"
              :delayOnTouchOnly="true"
              ghost-class="ghost-item"
              chosen-class="chosen-item"
              drag-class="dragging-item"
              @start="onDragStart"
              @end="onDragEnd"
            >
              <template #item="{ element, index }">
                <div class="drag-item" :data-index="index">
                  <div class="item-content">
                    <div class="drag-handle">⋮⋮</div>
                    <button class="delete-btn" @click.stop="removeItem(1, index)">&times;</button>
                    <img :src="element.icon" alt="icon">
                    <span>{{ element.name }}</span>
                  </div>
                </div>
              </template>
            </draggable>
          </div>

          <div class="area">
            <h4>区域 2</h4>
            <draggable 
              v-model="list2"
              :group="{ name: 'items', pull: true, put: true }"
              item-key="id"
              class="items-container"
              :animation="300"
              :delay="50"
              :delayOnTouchOnly="true"
              ghost-class="ghost-item"
              chosen-class="chosen-item"
              drag-class="dragging-item"
              @start="onDragStart"
              @end="onDragEnd"
            >
              <template #item="{ element, index }">
                <div class="drag-item area2" :data-index="index">
                  <div class="item-content">
                    <div class="drag-handle">⋮⋮</div>
                    <button class="delete-btn" @click.stop="removeItem(2, index)">&times;</button>
                    <img :src="element.icon" alt="icon">
                    <span>{{ element.name }}</span>
                  </div>
                </div>
              </template>
            </draggable>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref } from 'vue'
import draggable from 'vuedraggable'

const showDialog = ref(false)
const draggedElement = ref(null)
const draggedRect = ref(null)

const list1 = ref([
  { id: 1, name: '项目 1', icon: '📱' },
  { id: 2, name: '项目 2', icon: '💻' },
  { id: 3, name: '项目 3', icon: '🖥' },
  { id: 4, name: '项目 4', icon: '⌨️' },
])

const list2 = ref([
  { id: 5, name: '项目 5', icon: '🖱' },
  { id: 6, name: '项目 6', icon: '🖨' },
  { id: 7, name: '项目 7', icon: '📷' },
  { id: 8, name: '项目 8', icon: '📺' },
])

const removeItem = (listNumber, index) => {
  if (listNumber === 1) {
    list1.value.splice(index, 1)
  } else {
    list2.value.splice(index, 1)
  }
}

const onDragStart = (evt) => {
  draggedElement.value = evt.item
  draggedRect.value = evt.item.getBoundingClientRect()
  
  // 添加拖拽开始的类
  evt.item.classList.add('dragging')
  
  // 获取所有同容器内的其他项目
  const container = evt.item.closest('.items-container')
  const items = container.querySelectorAll('.drag-item:not(.dragging)')
  
  // 记录初始位置
  items.forEach(item => {
    const rect = item.getBoundingClientRect()
    item.dataset.originalX = rect.left
    item.dataset.originalY = rect.top
  })
}

const onDragEnd = (evt) => {
  if (draggedElement.value) {
    draggedElement.value.classList.remove('dragging')
    draggedElement.value = null
    draggedRect.value = null
    
    // 移除所有临时样式和数据
    const items = document.querySelectorAll('.drag-item')
    items.forEach(item => {
      item.style.transform = ''
      delete item.dataset.originalX
      delete item.dataset.originalY
    })
  }
}
</script>

<style scoped>
.container {
  padding: 20px;
}

.open-btn {
  padding: 8px 16px;
  background: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background 0.3s;
}

.open-btn:hover {
  background: #45a049;
}

.dialog {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.dialog-content {
  background: white;
  border-radius: 8px;
  width: 80%;
  max-width: 800px;
  max-height: 90vh;
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.dialog-header {
  padding: 16px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.close-btn {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  padding: 0 8px;
  transition: color 0.3s;
}

.close-btn:hover {
  color: #ff4444;
}

.dialog-body {
  padding: 20px;
  max-height: calc(90vh - 100px);
  overflow-y: auto;
}

.area {
  margin-bottom: 30px;
}

.area h4 {
  margin: 0 0 10px 0;
  color: #333;
  font-size: 1.1em;
}

.items-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 16px;
  min-height: 120px;
  padding: 16px;
  background: #f8f9fa;
  border: 2px dashed #ccc;
  border-radius: 8px;
  transition: background 0.3s, border-color 0.3s;
  position: relative;
}

.items-container:hover {
  border-color: #2196F3;
  background: #fafafa;
}

.drag-item {
  aspect-ratio: 1;
  background: white;
  border: 1px solid #ddd;
  border-radius: 8px;
  cursor: move;
  position: relative;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  will-change: transform;
}

.drag-handle {
  position: absolute;
  top: 8px;
  right: 8px;
  color: #999;
  cursor: move;
  font-size: 16px;
  opacity: 0;
  transition: opacity 0.3s;
}

.delete-btn {
  position: absolute;
  top: 8px;
  left: 8px;
  width: 24px;
  height: 24px;
  background: #ff4444;
  color: white;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  opacity: 0;
  transition: all 0.3s ease;
  z-index: 2;
}

.delete-btn:hover {
  background: #ff0000;
  transform: scale(1.1);
}

.drag-item:hover .delete-btn,
.drag-item:hover .drag-handle {
  opacity: 1;
}

.drag-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  border-color: #2196F3;
}

.drag-item.area2 {
  background: #e3f2fd;
}

.ghost-item {
  opacity: 0;
  background: transparent !important;
  border: 2px dashed #4CAF50 !important;
}

.dragging-item {
  transform: scale(1.05) !important;
  box-shadow: 0 8px 20px rgba(0,0,0,0.15) !important;
  z-index: 999;
  opacity: 0.9;
  background: white !important;
}

.dragging-item::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(33, 150, 243, 0.1);
  border-radius: 8px;
  z-index: -1;
}

.item-content {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  user-select: none;
  padding: 12px;
}

.item-content img {
  font-size: 28px;
  margin-bottom: 12px;
}

/* 拖拽时的动画效果 */
.items-container .drag-item {
  transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.items-container .drag-item:not(.dragging):not(.ghost-item) {
  transform-origin: center;
}

/* 被挤开的元素动画 */


/* 响应式布局 */
@media (max-width: 768px) {
  .items-container {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (max-width: 576px) {
  .items-container {
    grid-template-columns: repeat(2, 1fr);
  }
}
</style>










<template>
  <div class="container">
    <button class="open-btn" @click="showDialog = true">打开拖拽面板</button>

    <div class="dialog" v-if="showDialog">
      <div class="dialog-content">
        <div class="dialog-header">
          <div class="header-left">
            <h3>拖拽排序</h3>
            <div class="size-controls">
              <div class="input-group">
                <label>宽度:</label>
                <input 
                  type="number" 
                  v-model="itemWidth" 
                  @input="updateItemSize"
                  min="50"
                  max="300"
                >
                <span>px</span>
              </div>
              <div class="input-group">
                <label>高度:</label>
                <input 
                  type="number" 
                  v-model="itemHeight" 
                  @input="updateItemSize"
                  min="50"
                  max="300"
                >
                <span>px</span>
              </div>
            </div>
          </div>
          <button class="close-btn" @click="showDialog = false">&times;</button>
        </div>

        <div class="dialog-body">
          <div class="area">
            <h4>区域 1</h4>
            <draggable 
              v-model="list1"
              :group="{ name: 'items', pull: true, put: true }"
              item-key="id"
              class="items-container"
              :animation="400"
              :delay="50"
              :delayOnTouchOnly="true"
              ghost-class="ghost-item"
              drag-class="dragging-item"
              chosen-class="chosen-item"
              :clone-class="isCrossDragging ? 'clone-item' : ''"
              @start="onDragStart($event, 1)"
              @end="onDragEnd"
              @add="onAdd"
              @remove="onRemove"
              data-area="1"
            >
              <template #item="{ element, index }">
                <div 
                  class="drag-item" 
                  :data-index="index" 
                  :class="{ 'item-dragging': isDragging }"
                  :style="itemStyle"
                >
                  <div class="item-content">
                    <div class="drag-handle">⋮⋮</div>
                    <button class="delete-btn" @click.stop="removeItem(1, index)">&times;</button>
                    <img :src="element.icon" alt="icon">
                    <span>{{ element.name }}</span>
                  </div>
                </div>
              </template>
            </draggable>
          </div>

          <div class="area">
            <h4>区域 2</h4>
            <draggable 
              v-model="list2"
              :group="{ name: 'items', pull: true, put: true }"
              item-key="id"
              class="items-container"
              :animation="400"
              :delay="50"
              :delayOnTouchOnly="true"
              ghost-class="ghost-item"
              drag-class="dragging-item"
              chosen-class="chosen-item"
              :clone-class="isCrossDragging ? 'clone-item' : ''"
              @start="onDragStart($event, 2)"
              @end="onDragEnd"
              @add="onAdd"
              @remove="onRemove"
              data-area="2"
            >
              <template #item="{ element, index }">
                <div 
                  class="drag-item area2" 
                  :data-index="index" 
                  :class="{ 'item-dragging': isDragging }"
                  :style="itemStyle"
                >
                  <div class="item-content">
                    <div class="drag-handle">⋮⋮</div>
                    <button class="delete-btn" @click.stop="removeItem(2, index)">&times;</button>
                    <img :src="element.icon" alt="icon">
                    <span>{{ element.name }}</span>
                  </div>
                </div>
              </template>
            </draggable>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed } from 'vue'
import draggable from 'vuedraggable'

const showDialog = ref(false)
const isDragging = ref(false)
const isCrossDragging = ref(false)
const draggedElement = ref(null)
const draggedRect = ref(null)
const sourceArea = ref(null)

// 新增尺寸控制
const itemWidth = ref(150) // 默认宽度
const itemHeight = ref(150) // 默认高度

const itemStyle = computed(() => ({
  width: `${itemWidth.value}px`,
  height: `${itemHeight.value}px`
}))

const updateItemSize = () => {
  // 确保输入值在合理范围内
  itemWidth.value = Math.max(50, Math.min(300, itemWidth.value))
  itemHeight.value = Math.max(50, Math.min(300, itemHeight.value))
}

const list1 = ref([
  { id: 1, name: '项目 1', icon: '📱' },
  { id: 2, name: '项目 2', icon: '💻' },
  { id: 3, name: '项目 3', icon: '🖥' },
  { id: 4, name: '项目 4', icon: '⌨️' },
])

const list2 = ref([
  { id: 5, name: '项目 5', icon: '🖱' },
  { id: 6, name: '项目 6', icon: '🖨' },
  { id: 7, name: '项目 7', icon: '📷' },
  { id: 8, name: '项目 8', icon: '📺' },
])

const removeItem = (listNumber, index) => {
  if (listNumber === 1) {
    list1.value.splice(index, 1)
  } else {
    list2.value.splice(index, 1)
  }
}

const onDragStart = (evt, area) => {
  isDragging.value = true
  sourceArea.value = area
  draggedElement.value = evt.item
  draggedRect.value = evt.item.getBoundingClientRect()
  
  evt.item.classList.add('dragging')
  
  const container = evt.item.closest('.items-container')
  const items = container.querySelectorAll('.drag-item:not(.dragging)')
  
  items.forEach(item => {
    const rect = item.getBoundingClientRect()
    item.dataset.originalX = rect.left
    item.dataset.originalY = rect.top
  })
}

const onDragEnd = (evt) => {
  isDragging.value = false
  isCrossDragging.value = false
  sourceArea.value = null
  
  if (draggedElement.value) {
    draggedElement.value.classList.remove('dragging')
    draggedElement.value = null
    draggedRect.value = null
    
    const items = document.querySelectorAll('.drag-item')
    items.forEach(item => {
      item.style.transform = ''
      delete item.dataset.originalX
      delete item.dataset.originalY
    })
  }
}

const onAdd = (evt) => {
  const targetArea = evt.to.getAttribute('data-area')
  if (sourceArea.value !== parseInt(targetArea)) {
    isCrossDragging.value = true
  }
}

const onRemove = (evt) => {
  const targetArea = evt.to.getAttribute('data-area')
  if (sourceArea.value !== parseInt(targetArea)) {
    isCrossDragging.value = true
  }
}
</script>
<style scoped>
.container {
  padding: 20px;
}

.open-btn {
  padding: 8px 16px;
  background: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background 0.3s;
}

.open-btn:hover {
  background: #45a049;
}

.dialog {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.dialog-content {
  background: white;
  border-radius: 8px;
  width: 80%;
  max-width: 800px;
  max-height: 90vh;
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

/* 新增 header 相关样式 */
.dialog-header {
  padding: 16px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.header-left {
  display: flex;
  align-items: center;
  gap: 20px;
}

.size-controls {
  display: flex;
  gap: 16px;
}

.input-group {
  display: flex;
  align-items: center;
  gap: 8px;
}

.input-group label {
  color: #666;
  font-size: 14px;
}

.input-group input {
  width: 60px;
  padding: 4px 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 14px;
}

.input-group input:focus {
  outline: none;
  border-color: #2196F3;
}

.input-group span {
  color: #666;
  font-size: 14px;
}

.close-btn {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  padding: 0 8px;
  transition: color 0.3s;
}

.close-btn:hover {
  color: #ff4444;
}

.dialog-body {
  padding: 20px;
  max-height: calc(90vh - 100px);
  overflow-y: auto;
}

.area {
  margin-bottom: 30px;
}

.area h4 {
  margin: 0 0 10px 0;
  color: #333;
  font-size: 1.1em;
}

.items-container {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(var(--item-min-width, 150px), 1fr));
  gap: 16px;
  min-height: 120px;
  padding: 16px;
  background: #f8f9fa;
  border: 2px dashed #ccc;
  border-radius: 8px;
  transition: background 0.3s, border-color 0.3s;
  position: relative;
}

.items-container:hover {
  border-color: #2196F3;
  background: #fafafa;
}

.drag-item {
  background: white;
  border: 1px solid #ddd;
  border-radius: 8px;
  cursor: move;
  transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
  position: relative;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  will-change: transform;
  transform-origin: center;
}

.drag-handle {
  position: absolute;
  top: 8px;
  right: 8px;
  color: #999;
  cursor: move;
  font-size: 16px;
  opacity: 0;
  transition: opacity 0.3s;
}

.delete-btn {
  position: absolute;
  top: 8px;
  left: 8px;
  width: 24px;
  height: 24px;
  background: #ff4444;
  color: white;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  opacity: 0;
  transition: all 0.3s ease;
  z-index: 2;
}

.delete-btn:hover {
  background: #ff0000;
  transform: scale(1.1);
}

.drag-item:hover .delete-btn,
.drag-item:hover .drag-handle {
  opacity: 1;
}

.drag-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  border-color: #2196F3;
}

.drag-item.area2 {
  background: #e3f2fd;
}

.ghost-item {
  opacity: 0.2;
  background: #c8e6c9 !important;
  border: 2px dashed #4CAF50 !important;
  transform: scale(0.95);
  transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
}

.clone-item {
  background: #e3f2fd !important;
  border: 2px dashed #2196F3 !important;
  opacity: 0.3;
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  transform: scale(0.98);
  transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
}

.dragging-item {
  opacity: 0.8;
  transform: scale(1.05);
  z-index: 999;
  box-shadow: 0 8px 20px rgba(0,0,0,0.15);
  transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
}

.item-content {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  user-select: none;
  padding: 12px;
}

.item-content img {
  font-size: 28px;
  margin-bottom: 12px;
}

.item-dragging {
  transform: scale(1.05);
  box-shadow: 0 8px 16px rgba(0,0,0,0.2);
  z-index: 100;
}

/* 拖拽时的挤开效果 - 动态适应网格列数 */
.items-container .drag-item:not(.dragging-item):not(.ghost-item) {
  transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
}

@media (max-width: 768px) {
  .header-left {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }

  .size-controls {
    flex-direction: row;
    flex-wrap: wrap;
  }

  .input-group input {
    width: 50px;
  }
  
  .items-container {
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
  }
}

@media (max-width: 576px) {
  .dialog-content {
    width: 95%;
  }

  .size-controls {
    flex-direction: column;
    gap: 8px;
  }
  
  .items-container {
    grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    gap: 8px;
    padding: 8px;
  }

  .drag-item {
    font-size: 12px;
  }
}
</style>









<template>
  <div class="container">
    <button class="open-btn" @click="showDialog = true" aria-label="打开拖拽面板">
      打开拖拽面板
    </button>

    <Teleport to="body">
      <transition name="dialog-fade">
        <div class="dialog" v-if="showDialog" @click.self="showDialog = false" role="dialog" aria-modal="true">
          <div class="dialog-content" ref="dialogRef">
            <div class="dialog-header">
              <h3>拖拽排序</h3>
              <button 
                class="close-btn" 
                @click="showDialog = false"
                aria-label="关闭面板"
              >&times;</button>
            </div>

            <div class="dialog-body">
              <div class="area">
                <h4>区域 1</h4>
                <div ref="container1" class="items-container">
                  <div
                    v-for="item in list1"
                    :key="item.id"
                    class="drag-item"
                    :data-id="item.id"
                  >
                    <div class="item-content">
                      <div class="drag-handle" aria-hidden="true">⋮⋮</div>
                      <button 
                        class="delete-btn" 
                        @click.stop="removeItem(1, item.id)"
                        aria-label="删除项目"
                      >&times;</button>
                      <span class="item-icon" role="img" :aria-label="item.name">
                        {{ item.icon }}
                      </span>
                      <span class="item-name">{{ item.name }}</span>
                    </div>
                  </div>
                </div>
              </div>

              <div class="area">
                <h4>区域 2</h4>
                <div ref="container2" class="items-container">
                  <div
                    v-for="item in list2"
                    :key="item.id"
                    class="drag-item area2"
                    :data-id="item.id"
                  >
                    <div class="item-content">
                      <div class="drag-handle" aria-hidden="true">⋮⋮</div>
                      <button 
                        class="delete-btn" 
                        @click.stop="removeItem(2, item.id)"
                        aria-label="删除项目"
                      >&times;</button>
                      <span class="item-icon" role="img" :aria-label="item.name">
                        {{ item.icon }}
                      </span>
                      <span class="item-name">{{ item.name }}</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </transition>
    </Teleport>
  </div>
</template>

<script setup>
import { ref, onMounted, onBeforeUnmount } from 'vue'
import Sortable from 'sortablejs'

const showDialog = ref(false)
const container1 = ref(null)
const container2 = ref(null)
const isDragging = ref(false)

const list1 = ref([
  { id: 1, name: '项目 1', icon: '📱' },
  { id: 2, name: '项目 2', icon: '💻' },
  { id: 3, name: '项目 3', icon: '🖥' },
  { id: 4, name: '项目 4', icon: '⌨️' },
])

const list2 = ref([
  { id: 5, name: '项目 5', icon: '🖱' },
  { id: 6, name: '项目 6', icon: '🖨' },
  { id: 7, name: '项目 7', icon: '📷' },
  { id: 8, name: '项目 8', icon: '📺' },
])

const removeItem = (listNumber, itemId) => {
  const targetList = listNumber === 1 ? list1 : list2
  targetList.value = targetList.value.filter(item => item.id !== itemId)
}

const initSortable = (element, listRef) => {
  const options = {
    group: 'shared',
    animation: 300,
    delay: 50,
    delayOnTouchOnly: true,
    handle: '.drag-handle',
    ghostClass: 'ghost-item',
    chosenClass: 'chosen-item',
    dragClass: 'dragging-item',
    forceFallback: true,
    fallbackTolerance: 5,
    
    onStart: () => {
      isDragging.value = true
      document.body.style.cursor = 'grabbing'
    },
    
    onEnd: () => {
      isDragging.value = false
      document.body.style.cursor = ''
    },
    
    onSort: (evt) => {
      const items = Array.from(evt.from.children).map(el => {
        const id = parseInt(el.dataset.id)
        return listRef.value.find(item => item.id === id)
      })
      
      if (evt.from === evt.to) {
        // 同一列表内排序
        listRef.value = items
      } else {
        // 跨列表拖拽
        const fromList = evt.from === container1.value ? list1 : list2
        const toList = evt.to === container1.value ? list1 : list2
        
        // 更新源列表
        fromList.value = Array.from(evt.from.children).map(el => {
          const id = parseInt(el.dataset.id)
          return fromList.value.find(item => item.id === id)
        })
        
        // 更新目标列表
        toList.value = Array.from(evt.to.children).map(el => {
          const id = parseInt(el.dataset.id)
          return [...list1.value, ...list2.value].find(item => item.id === id)
        })
      }
    }
  }
  
  return Sortable.create(element, options)
}

let sortable1, sortable2

onMounted(() => {
  if (container1.value) {
    sortable1 = initSortable(container1.value, list1)
  }
  if (container2.value) {
    sortable2 = initSortable(container2.value, list2)
  }
  
  window.addEventListener('keydown', handleKeyboard)
})

onBeforeUnmount(() => {
  if (sortable1) {
    sortable1.destroy()
  }
  if (sortable2) {
    sortable2.destroy()
  }
  
  window.removeEventListener('keydown', handleKeyboard)
})

const handleKeyboard = (e) => {
  if (!showDialog.value) return
  
  if (e.key === 'Escape') {
    showDialog.value = false
  }
}
</script>

<style scoped>
.container {
  padding: 20px;
}

.open-btn {
  padding: 8px 16px;
  background: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  transition: background 0.3s;
}

.open-btn:hover {
  background: #45a049;
}

.dialog {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.dialog-content {
  background: white;
  border-radius: 8px;
  width: 80%;
  max-width: 800px;
  max-height: 90vh;
  box-shadow: 0 4px 20px rgba(0,0,0,0.15);
}

.dialog-header {
  padding: 16px;
  border-bottom: 1px solid #eee;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.close-btn {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  padding: 0 8px;
  transition: color 0.3s;
}

.close-btn:hover {
  color: #ff4444;
}

.dialog-body {
  padding: 20px;
  max-height: calc(90vh - 100px);
  overflow-y: auto;
}

.area {
  margin-bottom: 30px;
}

.area h4 {
  margin: 0 0 10px 0;
  color: #333;
  font-size: 1.1em;
}

.items-container {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 16px;
  min-height: 120px;
  padding: 16px;
  background: #f8f9fa;
  border: 2px dashed #ccc;
  border-radius: 8px;
  transition: background 0.3s, border-color 0.3s;
  position: relative;
}

.items-container:hover {
  border-color: #2196F3;
  background: #fafafa;
}

.drag-item {
  aspect-ratio: 1;
  background: white;
  border: 1px solid #ddd;
  border-radius: 8px;
  cursor: move;
  position: relative;
  overflow: hidden;
  box-shadow: 0 2px 4px rgba(0,0,0,0.05);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  will-change: transform;
  contain: content;
}

.drag-handle {
  position: absolute;
  top: 8px;
  right: 8px;
  color: #999;
  cursor: move;
  font-size: 16px;
  opacity: 0;
  transition: opacity 0.3s;
}

.delete-btn {
  position: absolute;
  top: 8px;
  left: 8px;
  width: 24px;
  height: 24px;
  background: #ff4444;
  color: white;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 16px;
  opacity: 0;
  transition: all 0.3s ease;
  z-index: 2;
}

.delete-btn:hover {
  background: #ff0000;
  transform: scale(1.1);
}

.drag-item:hover .delete-btn,
.drag-item:hover .drag-handle {
  opacity: 1;
}

.drag-item:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
  border-color: #2196F3;
}

.drag-item.area2 {
  background: #e3f2fd;
}

.ghost-item {
  opacity: 0.3;
  background: #4CAF50 !important;
}

.chosen-item {
  background: #f5f5f5;
}

.dragging-item {
  transform: scale(1.05) !important;
  box-shadow: 0 8px 20px rgba(0,0,0,0.15) !important;
  z-index: 999;
  opacity: 0.9;
  background: white !important;
}

.item-content {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  user-select: none;
  padding: 12px;
}

.item-icon {
  font-size: 28px;
  display: block;
  margin-bottom: 12px;
}

.item-name {
  font-size: 14px;
  color: #333;
  text-align: center;
  word-break: break-word;
}

.dialog-fade-enter-active,
.dialog-fade-leave-active {
  transition: opacity 0.3s ease;
}

.dialog-fade-enter-from,
.dialog-fade-leave-to {
  opacity: 0;
}

/* 响应式布局 */
@media (max-width: 768px) {
  .items-container {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (max-width: 576px) {
  .items-container {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* 触摸设备优化 */
@media (hover: none) {
  .drag-handle,
  .delete-btn {
    opacity: 1;
  }
  
  .drag-item:active {
    transform: scale(1.02);
  }
}

/* 深色模式支持 */
@media (prefers-color-scheme: dark) {
  .dialog-content {
    background: #1e1e1e;
    color: #fff;
  }
  
  .drag-item {
    background: #2d2d2d;
    border-color: #404040;
  }
  
  .item-name {
    color: #fff;
  }
  
  .items-container {
    background: #161616;
    border-color: #404040;
  }
}
</style>
