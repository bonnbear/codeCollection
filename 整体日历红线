<template>
  <div class="container mx-auto p-4">
    <div class="table-container">
      <div class="table-header">
        <div class="table-cell font-semibold">一级</div>
        <div class="table-cell font-semibold">二级</div>
        <div class="table-cell font-semibold">三级</div>
        <div class="table-cell font-semibold">活动描述</div>
        <div class="table-cell font-semibold">开始时间</div>
        <div class="table-cell font-semibold">结束时间</div>
        <div v-for="month in months" :key="month" class="table-cell font-semibold">{{ month }}</div>
      </div>
      <div class="table-body">
        <template v-for="(firstLevel, firstIndex) in treeStructure.children" :key="firstLevel.name">
          <div class="first-level-group">
            <div class="table-cell first-level">
              {{ firstLevel.name }}
            </div>
            <div class="branch-content">
              <template v-for="(branch, branchIndex) in firstLevel.children" :key="`${firstIndex}-${branchIndex}`">
                <div class="branch-row">
                  <div class="table-cell second-level">
                    {{ branch.name }}
                  </div>
                  <div class="leaf-content">
                    <template v-if="branch.children && branch.children.length">
                      <template v-for="(leaf, leafIndex) in branch.children" :key="`${firstIndex}-${branchIndex}-${leafIndex}`">
                        <div class="leaf-row">
                          <div class="table-cell third-level">{{ leaf.name }}</div>
                          <div class="activity-content">
                            <template v-for="(activity, activityIndex) in leaf.activities" :key="`${firstIndex}-${branchIndex}-${leafIndex}-${activityIndex}`">
                              <div class="activity-row">
                                <div class="table-cell activity-description">{{ activity.description }}</div>
                                <div class="table-cell activity-start-time">{{ activity.startTime }}</div>
                                <div class="table-cell activity-end-time">{{ activity.endTime }}</div>
                                <template v-for="month in months" :key="month">
                                  <div class="table-cell activity-month">
                                    <div v-if="isActivityInMonth(activity, month)" class="activity-block" :style="getActivityStyle(activity, month)"></div>
                                  </div>
                                </template>
                              </div>
                            </template>
                          </div>
                        </div>
                      </template>
                    </template>
                    <template v-else>
                      <div class="leaf-row">
                        <div class="table-cell third-level"></div>
                        <div class="activity-content">
                          <template v-for="(activity, activityIndex) in branch.activities" :key="`${firstIndex}-${branchIndex}-${activityIndex}`">
                            <div class="activity-row">
                              <div class="table-cell activity-description">{{ activity.description }}</div>
                              <div class="table-cell activity-start-time">{{ activity.startTime }}</div>
                              <div class="table-cell activity-end-time">{{ activity.endTime }}</div>
                              <template v-for="month in months" :key="month">
                                <div class="table-cell activity-month">
                                  <div v-if="isActivityInMonth(activity, month)" class="activity-block" :style="getActivityStyle(activity, month)"></div>
                                </div>
                              </template>
                            </div>
                          </template>
                        </div>
                      </div>
                    </template>
                  </div>
                </div>
              </template>
            </div>
          </div>
        </template>
      </div>
    </div>
    <div class="current-date-line" :style="getCurrentDateLineStyle()"></div>
  </div>
</template>

<script>
import { defineComponent, reactive, ref, onMounted, onUnmounted, computed } from 'vue';

export default defineComponent({
  name: 'TreeStructureTable',
  setup() {
    const months = ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'];
    const currentDate = ref(new Date());
    const currentYear = computed(() => currentDate.value.getFullYear());

    const treeStructure = reactive({
      name: "Root",
      children: [
        {
          name: "First Level 1",
          children: [
            {
              name: "Branch 1-1",
              children: [
                { name: "Leaf 1-1-1", activities: [{ name: "Activity 1", description: "Description of Activity 1", startTime: "2024-01-01", endTime: "2024-03-15" }] },
                { name: "Leaf 1-1-2", activities: [{ name: "Activity 2", description: "Description of Activity 2", startTime: "2024-02-01", endTime: "2024-05-10" }] },
              ]
            },
            {
              name: "Branch 1-2",
              activities: [{ name: "Activity 3", description: "Description of Activity 3", startTime: "2024-03-01", endTime: "2024-07-15" }]
            },
          ]
        },
        {
          name: "First Level 2",
          children: [
            {
              name: "Branch 2-1",
              children: [
                { name: "Leaf 2-1-1", activities: [{ name: "Activity 4", description: "Description of Activity 4", startTime: "2024-04-01", endTime: "2024-08-20" }] },
                { name: "Leaf 3-2-1", activities: [{ name: "Activity 8", description: "Description of Activity 8", startTime: "2024-08-01", endTime: "2024-12-10" }] },
                { name: "Leaf 2-1-3", activities: [{ name: "Activity 6", description: "Description of Activity 6", startTime: "2024-06-01", endTime: "2024-10-30" }] },
              ]
            },
          ]
        },
        {
          name: "First Level 3",
          children: [
            {
              name: "Branch 3-1",
              activities: [{ name: "Activity 7", description: "Description of Activity 7", startTime: "2024-07-01", endTime: "2024-11-05" }]
            },
            {
              name: "Branch 3-2",
              children: [
                { name: "Leaf 3-2-1", activities: [{ name: "Activity 8", description: "Description of Activity 8", startTime: "2024-08-01", endTime: "2024-12-10" }] },
                { name: "Leaf 3-2-2", activities: [{ name: "Activity 9", description: "Description of Activity 9", startTime: "2024-09-01", endTime: "2024-12-31" }] },
              ]
            },
          ]
        },
      ]
    });

    const isActivityInMonth = (activity, month) => {
      const startDate = new Date(activity.startTime);
      const endDate = new Date(activity.endTime);
      const monthIndex = months.indexOf(month);
      return startDate.getMonth() <= monthIndex && endDate.getMonth() >= monthIndex;
    };

    const getActivityStyle = (activity, month) => {
      const startDate = new Date(activity.startTime);
      const endDate = new Date(activity.endTime);
      const monthIndex = months.indexOf(month);
      const monthStart = new Date(currentYear.value, monthIndex, 1);
      const monthEnd = new Date(currentYear.value, monthIndex + 1, 0);

      let left = 0;
      let width = 100;

      if (startDate > monthStart) {
        left = ((startDate - monthStart) / (monthEnd - monthStart)) * 100;
      }

      if (endDate < monthEnd) {
        width = ((endDate - monthStart) / (monthEnd - monthStart)) * 100 - left;
      } else {
        width = 100 - left;
      }

      const isPastActivity = endDate < currentDate.value;

      return {
        left: `${left}%`,
        width: `${width}%`,
        backgroundColor: isPastActivity ? '#CCCCCC' : '#4CAF50',
      };
    };

 const getCurrentDateLineStyle = () => {
  const currentYear = currentDate.value.getFullYear();
  const startOfYear = new Date(currentYear, 0, 1);
  const endOfYear = new Date(currentYear, 11, 31);
  const totalDays = (endOfYear - startOfYear) / (24 * 60 * 60 * 1000) + 1; // 计算整年的总天数
  const daysPassed = Math.floor((currentDate.value - startOfYear) / (24 * 60 * 60 * 1000));
  const leftPosition = (daysPassed / totalDays) * 100;

  console.log('Total days in year:', totalDays);
  console.log('Days passed:', daysPassed);
  console.log('Left position:', leftPosition);

  return {
    left: `calc(${leftPosition}% + 291px)`,  // 291px is the width of the first 6 columns (48px * 6 + 1px border)
  };
};

    onMounted(() => {
      const timer = setInterval(() => {
        currentDate.value = new Date();
      }, 1000 * 60 * 60); // Update every hour

      onUnmounted(() => {
        clearInterval(timer);
      });
    });

    return {
      treeStructure,
      months,
      isActivityInMonth,
      getActivityStyle,
      getCurrentDateLineStyle,
    };
  }
});
</script>

<style scoped>
.container {
  font-family: Arial, sans-serif;
  font-size: 14px;
  position: relative;
}

.table-container {
  display: flex;
  flex-direction: column;
  border: 1px solid #e2e8f0;
  overflow-x: auto;
}

.table-header {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr repeat(12, 1fr);
  background-color: #f8fafc;
  font-weight: 600;
}

.table-body {
  display: flex;
  flex-direction: column;
}

.first-level-group {
  display: grid;
  grid-template-columns: 1fr 17fr;
  border-top: 1px solid #e2e8f0;
}

.branch-content {
  display: flex;
  flex-direction: column;
}

.branch-row {
  display: grid;
  grid-template-columns: 1fr 16fr;
  border-top: 1px solid #e2e8f0;
}

.leaf-content {
  display: flex;
  flex-direction: column;
}

.leaf-row {
  display: grid;
  grid-template-columns: 1fr 15fr;
  border-top: 1px solid #e2e8f0;
}

.activity-row {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr repeat(12, 1fr);
  border-top: 1px solid #e2e8f0;
}

.table-cell {
  padding: 8px;
  border-right: 1px solid #e2e8f0;
  display: flex;
  align-items: center;
}

.first-level {
  grid-row: 1 / -1;
}

.second-level {
  grid-row: 1 / -1;
}

.third-level {
  border-right: 1px solid #e2e8f0;
}

.activity-description, .activity-start-time, .activity-end-time, .activity-month {
  border-right: 1px solid #e2e8f0;
  min-height: 40px;
}

.activity-content {
  display: flex;
  flex-direction: column;
}

.table-cell:last-child {
  border-right: none;
}

.table-header .table-cell {
  padding: 12px 8px;
  background-color: #f1f5f9;
  border-bottom: 1px solid #e2e8f0;
}

.first-level-group:first-child {
  border-top: none;
}

.branch-row:first-child {
  border-top: none;
}

.leaf-row:first-child {
  border-top: none;
}

.activity-row:first-child {
  border-top: none;
}

.leaf-content > .leaf-row:first-child .activity-row {
  border-top: none;
}

.activity-month {
  position: relative;
}

.activity-block {
  position: absolute;
  top: 5px;
  bottom: 5px;
  border-radius: 3px;
}

.current-date-line {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 2px;
  background-color: red;
  z-index: 10;
}
</style>
