






<template>
  <div class="gantt-chart">
    <div class="task-types">
      <div class="task-type-header"></div>
      <div v-for="type in taskTypes" :key="type" class="task-type">
        {{ type }}
      </div>
    </div>
    <div class="calendar" ref="calendar">
      <div class="calendar-header">
        <div v-for="month in months" :key="month.key" class="month-header">
          {{ month.label }}
        </div>
      </div>
      <div v-for="type in taskTypes" :key="type" class="calendar-row">
        <div v-for="month in months" :key="month.key" class="calendar-cell">
          <div
            v-for="task in getTasksForMonth(type, month.key)"
            :key="task.id"
            class="task"
            :class="getTaskClasses(task, month.key)"
            :style="getTaskStyle(task, month.key)"
            :title="task.name"
          >
            <span v-if="isTaskStartingInMonth(task, month.key)">
              {{ task.name }}
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, computed, onMounted, nextTick } from "vue";

export default {
  name: "GanttChart",
  setup() {
    const taskTypes = ref(["开发", "设计", "测试", "部署"]);
    const startDate = ref(new Date("2023-01-01"));
    const endDate = ref(new Date("2023-12-31"));
    const calendar = ref(null);
    const cellWidth = ref(0);

    const months = computed(() => {
      const monthArray = [];
      let currentDate = new Date(startDate.value);
      while (currentDate <= endDate.value) {
        monthArray.push({
          key: currentDate.toISOString().slice(0, 7),
          label: formatMonth(currentDate),
        });
        currentDate.setMonth(currentDate.getMonth() + 1);
      }
      return monthArray;
    });

    const formatMonth = (date) => {
      return date.toLocaleDateString("zh-CN", {
        year: "numeric",
        month: "short",
      });
    };

    const tasks = ref([
      { id: 1, name: "需求分析", type: "开发", start: "2023-01-01", end: "2023-02-15" },
      { id: 2, name: "UI设计", type: "设计", start: "2023-02-16", end: "2023-03-31" },
      { id: 3, name: "前端开发", type: "开发", start: "2023-04-01", end: "2023-05-31" },
      { id: 4, name: "后端开发", type: "开发", start: "2023-06-01", end: "2023-07-31" },
      { id: 5, name: "单元测试", type: "测试", start: "2023-08-01", end: "2023-09-15" },
      { id: 6, name: "集成测试", type: "测试", start: "2023-09-16", end: "2023-10-14" },
      { id: 7, name: "部署准备", type: "部署", start: "2023-11-01", end: "2023-11-30" },
      { id: 8, name: "正式上线", type: "部署", start: "2023-12-01", end: "2023-12-31" },
    ]);

    const getTasksForMonth = (type, monthKey) => {
      return tasks.value.filter(
        (task) =>
          task.type === type &&
          task.start.slice(0, 7) <= monthKey &&
          task.end.slice(0, 7) >= monthKey
      );
    };

    const isTaskStartingInMonth = (task, monthKey) => {
      return task.start.slice(0, 7) === monthKey;
    };

    const getTaskStyle = (task, monthKey) => {
      const taskStart = new Date(task.start);
      const taskEnd = new Date(task.end);
      const monthStart = new Date(monthKey + "-01");
      const monthEnd = new Date(
        monthStart.getFullYear(),
        monthStart.getMonth() + 1,
        0
      );
      const start = taskStart < monthStart ? monthStart : taskStart;
      const end = taskEnd > monthEnd ? monthEnd : taskEnd;
      const daysInMonth = monthEnd.getDate();
      const taskStartDay = start.getDate();
      const taskDuration = end.getDate() - start.getDate() + 1;
      
      let marginLeft = `${((taskStartDay - 1) / daysInMonth) * 100}%`;
      let width = `${(taskDuration / daysInMonth) * 100}%`;
      
      // 处理跨月份的情况
      if (task.start.slice(0, 7) < monthKey) {
        marginLeft = '0';
        width = `calc(${width} + 1px)`;
      }
      if (task.end.slice(0, 7) > monthKey) {
        width = `calc(${width} + 1px)`;
      }

      return {
        marginLeft,
        width,
        backgroundColor: getTaskColor(task.type),
      };
    };

    const getTaskClasses = (task, monthKey) => {
      const classes = [];
      if (task.start.slice(0, 7) === monthKey) {
        classes.push('task-start');
      } else if (task.start.slice(0, 7) < monthKey) {
        classes.push('task-continue-start');
      }
      if (task.end.slice(0, 7) === monthKey) {
        classes.push('task-end');
      } else if (task.end.slice(0, 7) > monthKey) {
        classes.push('task-continue-end');
      }
      return classes;
    };

    const getTaskColor = (type) => {
      const colors = {
        开发: "#4CAF50",
        设计: "#2196F3",
        测试: "#FFC107",
        部署: "#9C27B0",
      };
      return colors[type] || "#757575";
    };

    onMounted(() => {
      nextTick(() => {
        if (calendar.value) {
          const calendarWidth = calendar.value.clientWidth;
          cellWidth.value = calendarWidth / months.value.length;
        }
      });
    });

    return {
      taskTypes,
      months,
      getTasksForMonth,
      getTaskStyle,
      getTaskClasses,
      isTaskStartingInMonth,
      calendar,
    };
  },
};
</script>

<style scoped>
.gantt-chart {
  display: flex;
  overflow-x: auto;
  font-family: Arial, sans-serif;
}

.task-types {
  min-width: 100px;
  border-right: 1px solid #ccc;
  background-color: #f0f0f0;
}

.task-type-header {
  height: 50px; /* 调整为与月份标题相同的高度 */
  border-bottom: 1px solid #ccc;
}

.task-type {
  height: 50px;
  display: flex;
  align-items: center;
  padding: 0 10px;
  border-bottom: 1px solid #ccc;
  font-weight: bold;
}

.calendar {
  flex-grow: 1;
}

.calendar-header {
  display: flex;
  background-color: #e0e0e0;
}

.month-header {
  flex: 1;
  text-align: center;
  padding: 10px;
  border-right: 1px solid #ccc;
  border-bottom: 1px solid #ccc;
  font-weight: bold;
  height: 50px; /* 确保月份标题的高度与任务类型头部一致 */
  box-sizing: border-box; /* 确保padding不会增加总高度 */
  display: flex;
  align-items: center;
  justify-content: center;
}

.calendar-row {
  display: flex;
}

.calendar-cell {
  flex: 1;
  height: 50px;
  border-right: 1px solid #ccc;
  border-bottom: 1px solid #ccc;
  position: relative;
  overflow: visible;
}

.task {
  position: absolute;
  top: 5px;
  height: 40px;
  border-radius: 0;
  color: white;
  padding: 2px 5px;
  font-size: 12px;
  box-sizing: border-box;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  z-index: 1;
}

.task-start {
  border-top-left-radius: 3px;
  border-bottom-left-radius: 3px;
}

.task-end {
  border-top-right-radius: 3px;
  border-bottom-right-radius: 3px;
}

.task-continue-start {
  border-left: none;
}

.task-continue-end {
  border-right: none;
}
</style>
