<template>
  <div>
    <h2>User Table：</h2>
    <el-button type="primary" @click="handleAdd" style="margin-bottom: 20px;">Add User</el-button>
    <el-table :data="tableData" style="width: 100%" :max-height="600">
      <el-table-column
        v-for="col in columns"
        :key="col.prop"
        :prop="col.prop"
        :label="col.label"
        :width="col.width"
        :fixed="col.fixed"
      />
      <el-table-column label="Operations" width="180" fixed="right">
        <template #default="scope">
          <el-button size="small" @click="handleEdit(scope.$index, scope.row)">Edit</el-button>
          <el-button size="small" type="danger" @click="handleDelete(scope.$index, scope.row)">Delete</el-button>
        </template>
      </el-table-column>
    </el-table>

    <!-- Native Modal -->
    <div v-if="dialogVisible" class="modal-overlay">
      <div class="modal-content">
        <h3>{{ isEdit ? 'Edit User：' : 'Add User：' }}</h3>
        <el-form :model="formData" :rules="rules" ref="formRef">
          <div class="form-columns">
            <div class="form-column">
              <div 
                v-for="col in columns.slice(0, Math.ceil(columns.length / 2))" 
                :key="col.prop" 
                class="form-item-wrapper"
              >
                <span class="form-label" :class="{ 'required': isFieldRequired(col.prop) }">{{ col.label }}：</span>
                <el-form-item :prop="col.prop">
                  <el-input v-if="!specialInputTypes.includes(col.prop)" v-model="formData[col.prop]"></el-input>
                  <el-input-number v-else-if="col.prop === 'age'" v-model="formData[col.prop]" :min="0" :max="150"></el-input-number>
                  <el-date-picker v-else-if="col.prop === 'date' || col.prop === 'hireDate'" v-model="formData[col.prop]" type="date"></el-date-picker>
                  <el-select v-else-if="col.prop === 'status'" v-model="formData[col.prop]">
                    <el-option label="Active" value="Active"></el-option>
                    <el-option label="Inactive" value="Inactive"></el-option>
                  </el-select>
                  <el-input v-else-if="col.prop === 'notes' || col.prop === 'projects' || col.prop === 'skills'" 
                            v-model="formData[col.prop]" 
                            type="textarea" 
                            :rows="4">
                  </el-input>
                </el-form-item>
              </div>
            </div>
            <div class="form-column">
              <div 
                v-for="col in columns.slice(Math.ceil(columns.length / 2))" 
                :key="col.prop" 
                class="form-item-wrapper"
              >
                <span class="form-label" :class="{ 'required': isFieldRequired(col.prop) }">{{ col.label }}：</span>
                <el-form-item :prop="col.prop">
                  <el-input v-if="!specialInputTypes.includes(col.prop)" v-model="formData[col.prop]"></el-input>
                  <el-input-number v-else-if="col.prop === 'age'" v-model="formData[col.prop]" :min="0" :max="150"></el-input-number>
                  <el-date-picker v-else-if="col.prop === 'date' || col.prop === 'hireDate'" v-model="formData[col.prop]" type="date"></el-date-picker>
                  <el-select v-else-if="col.prop === 'status'" v-model="formData[col.prop]">
                    <el-option label="Active" value="Active"></el-option>
                    <el-option label="Inactive" value="Inactive"></el-option>
                  </el-select>
                  <el-input v-else-if="col.prop === 'notes' || col.prop === 'projects' || col.prop === 'skills'" 
                            v-model="formData[col.prop]" 
                            type="textarea" 
                            :rows="4">
                  </el-input>
                </el-form-item>
              </div>
            </div>
          </div>
        </el-form>
        <div class="modal-footer">
          <el-button @click="dialogVisible = false">Cancel</el-button>
          <el-button type="primary" @click="submitForm">Confirm</el-button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, reactive } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'

const columns = [
  { prop: 'id', label: 'ID', width: 80, fixed: 'left' },
  { prop: 'date', label: 'Date', width: 120 },
  { prop: 'name', label: 'Name', width: 120 },
  { prop: 'age', label: 'Age', width: 80 },
  { prop: 'email', label: 'Email', width: 200 },
  { prop: 'phone', label: 'Phone', width: 150 },
  { prop: 'address', label: 'Address', width: 250 },
  { prop: 'city', label: 'City', width: 120 },
  { prop: 'state', label: 'State', width: 100 },
  { prop: 'zipCode', label: 'Zip Code', width: 100 },
  { prop: 'country', label: 'Country', width: 120 },
  { prop: 'company', label: 'Company', width: 150 },
  { prop: 'department', label: 'Department', width: 150 },
  { prop: 'position', label: 'Position', width: 150 },
  { prop: 'salary', label: 'Salary', width: 120 },
  { prop: 'hireDate', label: 'Hire Date', width: 120 },
  { prop: 'manager', label: 'Manager', width: 120 },
  { prop: 'status', label: 'Status', width: 100 },
  { prop: 'lastLogin', label: 'Last Login', width: 150 },
  { prop: 'language', label: 'Language', width: 100 },
  { prop: 'timezone', label: 'Timezone', width: 120 },
  { prop: 'website', label: 'Website', width: 200 },
  { prop: 'skills', label: 'Skills', width: 200 },
  { prop: 'education', label: 'Education', width: 200 },
  { prop: 'certification', label: 'Certification', width: 200 },
  { prop: 'projects', label: 'Projects', width: 200 },
  { prop: 'performance', label: 'Performance', width: 120 },
  { prop: 'notes', label: 'Notes', width: 200 },
  { prop: 'createdBy', label: 'Created By', width: 120 },
  { prop: 'updatedAt', label: 'Updated At', width: 150 },
]

const tableData = ref([
  {
    id: 1,
    date: '2016-05-03',
    name: 'Tom',
    age: 28,
    email: 'tom@example.com',
    phone: '(123) 456-7890',
    address: '123 Main St',
    city: 'Los Angeles',
    state: 'CA',
    zipCode: '90001',
    country: 'USA',
    company: 'Tech Co',
    department: 'IT',
    position: 'Developer',
    salary: 80000,
    hireDate: '2020-01-15',
    manager: 'Jane Doe',
    status: 'Active',
    lastLogin: '2023-09-01 09:00',
    language: 'English',
    timezone: 'PST',
    website: 'www.tom.com',
    skills: 'JavaScript, Vue',
    education: 'BS Computer Science',
    certification: 'AWS Certified',
    projects: 'Project A, Project B',
    performance: 'Excellent',
    notes: 'Hard worker, always completes tasks on time.',
    createdBy: 'Admin',
    updatedAt: '2023-09-01 10:00',
  },
  // Add more sample data here...
])

const dialogVisible = ref(false)
const formData = reactive({})
const formRef = ref(null)
const editIndex = ref(-1)
const isEdit = ref(false)

const specialInputTypes = ['age', 'date', 'hireDate', 'status', 'notes', 'projects', 'skills']

const rules = {
  name: [
    { required: true, message: 'Please input the name', trigger: 'blur' },
    { min: 2, max: 50, message: 'Length should be 2 to 50 characters', trigger: 'blur' }
  ],
  email: [
    { required: true, message: 'Please input the email address', trigger: 'blur' },
    { type: 'email', message: 'Please input a valid email address', trigger: 'blur' }
  ],
  age: [
    { required: true, message: 'Please input the age', trigger: 'blur' },
    { type: 'number', message: 'Age must be a number', trigger: 'blur' }
  ],
  phone: [
    { required: true, message: 'Please input the phone number', trigger: 'blur' },
    { pattern: /^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$/, message: 'Please input a valid phone number', trigger: 'blur' }
  ],
  // Add more validation rules for other fields as needed
}

const isFieldRequired = (prop) => {
  return rules[prop] && rules[prop].some(rule => rule.required)
}

const handleAdd = () => {
  isEdit.value = false
  Object.keys(formData).forEach(key => formData[key] = '')
  dialogVisible.value = true
}

const handleEdit = (index, row) => {
  isEdit.value = true
  editIndex.value = index
  Object.assign(formData, row)
  dialogVisible.value = true
}

const handleDelete = (index, row) => {
  ElMessageBox.confirm('Are you sure you want to delete this user?', 'Warning', {
    confirmButtonText: 'OK',
    cancelButtonText: 'Cancel',
    type: 'warning',
  }).then(() => {
    tableData.value.splice(index, 1)
    ElMessage.success('Delete completed')
  }).catch(() => {
    ElMessage.info('Delete canceled')
  })
}

const submitForm = () => {
  formRef.value.validate((valid) => {
    if (valid) {
      if (isEdit.value) {
        Object.assign(tableData.value[editIndex.value], formData)
        ElMessage.success('Edit completed')
      } else {
        const newUser = { ...formData, id: tableData.value.length + 1 }
        tableData.value.push(newUser)
        ElMessage.success('Add completed')
      }
      dialogVisible.value = false
    } else {
      ElMessage.error('Please correct the form errors')
      return false
    }
  })
}
</script>

<style scoped>
h2 {
  margin-bottom: 20px;
}
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}
.modal-content {
  background-color: white;
  padding: 30px;
  border-radius: 8px;
  width: 90%;
  max-width: 1200px;
  height: 90vh;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
}
.modal-content h3 {
  margin-top: 0;
  margin-bottom: 20px;
}
.modal-footer {
  margin-top: 20px;
  text-align: right;
}
.modal-footer button:first-child {
  margin-right: 10px;
}
.form-columns {
  display: flex;
  flex-wrap: wrap;
  gap: 30px;
  flex-grow: 1;
  overflow-y: auto;
}
.form-column {
  flex: 1;
  min-width: 400px;
}
.form-item-wrapper {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
}
.form-label {
  width: 150px;
  text-align: right;
  margin-right: 15px;
  flex-shrink: 0;
}
.form-label.required::before {
  content: '*';
  color: #f56c6c;
  margin-right: 4px;
}
.el-form-item {
  margin-bottom: 0;
  flex-grow: 1;
}
.form-item-wrapper:has(.el-textarea) {
  align-items: flex-start;
}
:deep(.el-textarea) {
  height: 100%;
}
:deep(.el-textarea .el-textarea__inner) {
  height: 100% !important;
}
.form-item-wrapper:has(.el-textarea) .form-label {
  padding-top: 8px;
}
</style>
