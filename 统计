<template>
  <div class="calendar-container">
    <div class="month-overview">
      <h2>{{ currentYear }}年{{ currentMonth }}月总览</h2>
      <p>本月共有 {{ monthlyEventCount }} 个事项</p>
    </div>
    <div class="month-tabs">
      <button @click="previousMonth">&lt;</button>
      <button 
        v-for="month in months" 
        :key="month" 
        @click="currentMonth = month" 
        :class="{ active: currentMonth === month }"
      >
        {{ month }}月
      </button>
      <button @click="nextMonth">&gt;</button>
    </div>
    <div class="week-row">
      <div v-for="day in weekDays" :key="day" class="week-day">{{ day }}</div>
    </div>
    <div class="dates-grid">
      <div 
        v-for="date in datesInMonth" 
        :key="`${currentYear}-${currentMonth}-${date.day}`"
        class="date-cell" 
        :class="{ 'other-month': !date.currentMonth }"
      >
        <div class="date-number">{{ date.day }}</div>
        <div v-if="getEventData(date).length > 0" class="event-container">
          <el-popover placement="top-start" :width="250" trigger="hover">
            <template #default>
              <div v-for="(item, index) in getEventData(date)" :key="index" class="popover-item">
                <div><strong>内容:</strong> {{ item.content }}</div>
                <div><strong>处理人:</strong> {{ item.handler }}</div>
                <div><strong>状态:</strong> {{ item.status }}</div>
                <div><strong>优先级:</strong> {{ item.priority }}</div>
                <div><strong>数量:</strong> {{ item.count }}</div>
                <hr v-if="index < getEventData(date).length - 1">
              </div>
            </template>
            <template #reference>
              <div class="event-card" :class="getHighestPriority(date)">
                {{ getEventData(date).length }}个事项
              </div>
            </template>
          </el-popover>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, watch, onMounted } from 'vue'

const currentMonth = ref(7) // 固定为7月
const currentYear = ref(2023) // 固定为2023年

const months = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
const weekDays = ['一', '二', '三', '四', '五', '六', '日']

const datesInMonth = ref([])

// 示例数据
const events = ref([
  { date: '2023-07-05', content: '项目启动会议', handler: '张三', status: '未开始', priority: 'high', count: 3 },
  { date: '2023-07-10', content: '代码审查', handler: '李四', status: '进行中', priority: 'medium', count: 2 },
  { date: '2023-07-15', content: '团队建设活动', handler: '王五', status: '已完成', priority: 'low', count: 1 },
  { date: '2023-07-20', content: '客户演示', handler: '赵六', status: '未开始', priority: 'high', count: 4 },
  { date: '2023-07-25', content: '月度总结会议', handler: '张三', status: '未开始', priority: 'medium', count: 2 },
  { date: '2023-08-03', content: '产品发布会', handler: '李四', status: '未开始', priority: 'high', count: 5 },
  { date: '2023-08-12', content: '技术培训', handler: '王五', status: '未开始', priority: 'medium', count: 3 },
  { date: '2023-06-28', content: '季度回顾', handler: '赵六', status: '已完成', priority: 'low', count: 2 },
])

const monthlyEventCount = computed(() => {
  const currentMonthEvents = events.value.filter(event => {
    const [year, month] = event.date.split('-').map(Number);
    return year === currentYear.value && month === currentMonth.value;
  });
  return currentMonthEvents.reduce((total, event) => total + event.count, 0);
});

const updateDatesInMonth = () => {
  const firstDay = new Date(currentYear.value, currentMonth.value - 1, 1)
  const lastDay = new Date(currentYear.value, currentMonth.value, 0)
  const daysInMonth = lastDay.getDate()
  let startingDayOfWeek = firstDay.getDay() - 1 // 调整为周一为0
  if (startingDayOfWeek === -1) startingDayOfWeek = 6 // 如果是周日，设为6

  const dates = []

  // 添加上个月的日期
  const prevMonth = currentMonth.value === 1 ? 12 : currentMonth.value - 1
  const prevYear = currentMonth.value === 1 ? currentYear.value - 1 : currentYear.value
  for (let i = 0; i < startingDayOfWeek; i++) {
    const day = new Date(prevYear, prevMonth - 1, lastDay.getDate() - startingDayOfWeek + i + 1)
    dates.push({ 
      day: day.getDate(), 
      currentMonth: false, 
      date: formatDate(day)
    })
  }

  // 添加当前月的日期
  for (let i = 1; i <= daysInMonth; i++) {
    const day = new Date(currentYear.value, currentMonth.value - 1, i)
    dates.push({ 
      day: i, 
      currentMonth: true, 
      date: formatDate(day)
    })
  }

  // 添加下个月的日期以填满网格
  const nextMonth = currentMonth.value === 12 ? 1 : currentMonth.value + 1
  const nextYear = currentMonth.value === 12 ? currentYear.value + 1 : currentYear.value
  const remainingDays = 42 - dates.length
  for (let i = 1; i <= remainingDays; i++) {
    const day = new Date(nextYear, nextMonth - 1, i)
    dates.push({ 
      day: i, 
      currentMonth: false, 
      date: formatDate(day)
    })
  }

  datesInMonth.value = dates
}

const formatDate = (date) => {
  const year = date.getFullYear()
  const month = String(date.getMonth() + 1).padStart(2, '0')
  const day = String(date.getDate()).padStart(2, '0')
  return `${year}-${month}-${day}`
}

const getEventData = (date) => {
  return events.value.filter(event => event.date === date.date)
}

const getHighestPriority = (date) => {
  const dateEvents = getEventData(date)
  if (dateEvents.some(e => e.priority === 'high')) return 'high'
  if (dateEvents.some(e => e.priority === 'medium')) return 'medium'
  return 'low'
}

const previousMonth = () => {
  if (currentMonth.value === 1) {
    currentMonth.value = 12
    currentYear.value--
  } else {
    currentMonth.value--
  }
  updateDatesInMonth()
}

const nextMonth = () => {
  if (currentMonth.value === 12) {
    currentMonth.value = 1
    currentYear.value++
  } else {
    currentMonth.value++
  }
  updateDatesInMonth()
}

watch(events, () => {
  updateDatesInMonth()
}, { deep: true })

watch([currentMonth, currentYear], () => {
  updateDatesInMonth()
})

onMounted(() => {
  updateDatesInMonth()
})
</script>

<style scoped>
.calendar-container {
  font-family: Arial, sans-serif;
  max-width: 800px;
  margin: 0 auto;
}

.month-overview {
  text-align: center;
  margin-bottom: 20px;
  background-color: #f0f0f0;
  padding: 10px;
  border-radius: 5px;
}

.month-overview h2 {
  margin-bottom: 10px;
}

.month-tabs {
  display: flex;
  justify-content: space-between;
  margin-bottom: 20px;
}

.month-tabs button {
  padding: 10px;
  border: none;
  background-color: #f0f0f0;
  cursor: pointer;
}

.month-tabs button.active {
  background-color: #007bff;
  color: white;
}

.week-row {
  display: flex;
  justify-content: space-between;
  text-align: center;
  font-weight: bold;
  margin-bottom: 10px;
}

.week-day {
  flex: 1;
}

.dates-grid {
  display: flex;
  flex-wrap: wrap;
}

.date-cell {
  flex-basis: calc(100% / 7 - 10px);
  border: 1px solid #ddd;
  padding: 5px;
  min-height: 80px;
  margin: 5px;
  box-sizing: border-box;
}

.date-number {
  font-weight: bold;
  margin-bottom: 5px;
}

.other-month {
  opacity: 0.5;
}

.event-container {
  margin-top: 5px;
}

.event-card {
  background-color: #e0e0e0;
  padding: 2px 5px;
  border-radius: 3px;
  font-size: 0.8em;
  cursor: pointer;
}

.event-card.high { background-color: #ffcccb; }
.event-card.medium { background-color: #ffffcc; }
.event-card.low { background-color: #e0e0e0; }

.popover-item {
  margin-bottom: 10px;
}
</style>
