<template>
  <div id="app">
    <div class="calendar">
      <div class="header">
        <button @click="previousMonth">&lt;</button>
        <h2>{{ currentMonthName }} {{ currentYear }}</h2>
        <button @click="nextMonth">&gt;</button>
      </div>
      <div class="weekdays">
        <div v-for="day in weekdays" :key="day">{{ day }}</div>
      </div>
      <div class="days">
        <div 
          v-for="day in days" 
          :key="day.date" 
          :class="{ 'current-month': day.currentMonth, 'other-month': !day.currentMonth }"
          @click="selectDate(day)"
          class="day-cell"
        >
          {{ day.date.getDate() }}
          <div class="todo-indicator" v-if="day.hasTodo"></div>
          <small style="font-size: 8px; color: #999;">{{ day.hasTodo ? 'T' : 'F' }}</small>
        </div>
      </div>
      <div v-if="selectedDate" class="todo-list">
        <h3>待办事项 ({{ selectedDate.toDateString() }})</h3>
        <ul>
          <li v-for="(todo, index) in todos[selectedDate.toDateString()]" :key="index">
            {{ todo.text }}
            <button @click="removeTodo(index)">删除</button>
          </li>
        </ul>
        <input v-model="newTodo" @keyup.enter="addTodo" placeholder="添加新待办事项">
        <button @click="addTodo">添加</button>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, computed, onMounted } from 'vue';

export default {
  name: 'App',
  setup() {
    const currentDate = ref(new Date());
    const selectedDate = ref(null);
    const newTodo = ref('');
    const todos = ref({});

    const weekdays = ['日', '一', '二', '三', '四', '五', '六'];

    const currentMonthName = computed(() => {
      return currentDate.value.toLocaleString('default', { month: 'long' });
    });

    const currentYear = computed(() => {
      return currentDate.value.getFullYear();
    });

    const days = ref([]);

    function calculateDays() {
      const year = currentDate.value.getFullYear();
      const month = currentDate.value.getMonth();
      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      const daysArray = [];

      // 添加上个月的天数
      for (let i = firstDay.getDay(); i > 0; i--) {
        const date = new Date(year, month, 1 - i);
        daysArray.push({ date, currentMonth: false, hasTodo: checkTodo(date) });
      }

      // 添加当前月的天数
      for (let i = 1; i <= lastDay.getDate(); i++) {
        const date = new Date(year, month, i);
        daysArray.push({ date, currentMonth: true, hasTodo: checkTodo(date) });
      }

      // 添加下个月的天数
      const remainingDays = 7 - (daysArray.length % 7);
      if (remainingDays < 7) {
        for (let i = 1; i <= remainingDays; i++) {
          const date = new Date(year, month + 1, i);
          daysArray.push({ date, currentMonth: false, hasTodo: checkTodo(date) });
        }
      }

      days.value = daysArray;
    }

    function previousMonth() {
      currentDate.value = new Date(currentDate.value.getFullYear(), currentDate.value.getMonth() - 1, 1);
      calculateDays();
    }

    function nextMonth() {
      currentDate.value = new Date(currentDate.value.getFullYear(), currentDate.value.getMonth() + 1, 1);
      calculateDays();
    }

    function selectDate(day) {
      selectedDate.value = day.date;
      if (!todos.value[day.date.toDateString()]) {
        todos.value[day.date.toDateString()] = [];
      }
    }

    function addTodo() {
      if (newTodo.value.trim() && selectedDate.value) {
        const dateString = selectedDate.value.toDateString();
        if (!todos.value[dateString]) {
          todos.value[dateString] = [];
        }
        todos.value[dateString].push({ text: newTodo.value.trim() });
        newTodo.value = '';
        saveTodos();
        updateTodoIndicator(selectedDate.value, true);
      }
    }

    function removeTodo(index) {
      const dateString = selectedDate.value.toDateString();
      todos.value[dateString].splice(index, 1);
      saveTodos();
      updateTodoIndicator(selectedDate.value, todos.value[dateString].length > 0);
    }

    function checkTodo(date) {
      return todos.value[date.toDateString()] && todos.value[date.toDateString()].length > 0;
    }

    function updateTodoIndicator(date, hasTodo) {
      const dayIndex = days.value.findIndex(day => day.date.toDateString() === date.toDateString());
      if (dayIndex !== -1) {
        days.value[dayIndex].hasTodo = hasTodo;
      }
    }

    function saveTodos() {
      localStorage.setItem('todos', JSON.stringify(todos.value));
    }

    function loadTodos() {
      const savedTodos = localStorage.getItem('todos');
      if (savedTodos) {
        todos.value = JSON.parse(savedTodos);
      }
    }

    onMounted(() => {
      loadTodos();
      calculateDays();
    });

    return {
      currentDate,
      selectedDate,
      newTodo,
      todos,
      weekdays,
      currentMonthName,
      currentYear,
      days,
      previousMonth,
      nextMonth,
      selectDate,
      addTodo,
      removeTodo,
    };
  }
};
</script>

<style>
#app {
  font-family: Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  text-align: center;
  color: #2c3e50;
  margin-top: 60px;
}

.calendar {
  max-width: 800px;
  margin: 0 auto;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.weekdays {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  text-align: center;
  font-weight: bold;
  margin-bottom: 10px;
}

.days {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 5px;
}

.day-cell {
  border: 1px solid #ddd;
  padding: 10px;
  text-align: center;
  cursor: pointer;
  position: relative;
  min-height: 30px;
}

.current-month {
  background-color: #f0f0f0;
}

.other-month {
  color: #999;
}

.todo-indicator {
  width: 8px;
  height: 8px;
  background-color: red;
  border-radius: 50%;
  position: absolute;
  bottom: 2px;
  right: 2px;
  box-shadow: 0 0 2px rgba(0,0,0,0.5);
}

.todo-list {
  margin-top: 20px;
}

ul {
  list-style-type: none;
  padding: 0;
}

li {
  margin-bottom: 5px;
}

input {
  margin-right: 10px;
}
</style>
